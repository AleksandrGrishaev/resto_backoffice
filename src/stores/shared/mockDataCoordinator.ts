// src/stores/shared/mockDataCoordinator.ts - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏

import {
  CORE_PRODUCTS,
  type CoreProductDefinition,
  validateAllProducts
} from './productDefinitions'
import type { Product, ProductPriceHistory } from '@/stores/productsStore/types'
import { DebugUtils } from '@/utils'

const MODULE_NAME = 'MockDataCoordinator'

export class MockDataCoordinator {
  private productsData: {
    products: Product[]
    priceHistory: ProductPriceHistory[]
  } | null = null

  constructor() {
    DebugUtils.info(MODULE_NAME, 'üèóÔ∏è Initializing mock data coordinator with base units support')

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (import.meta.env.DEV) {
      this.validateProductDefinitions()
    }
  }

  // =============================================
  // –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–ô
  // =============================================

  private validateProductDefinitions(): void {
    const validation = validateAllProducts()

    if (!validation.isValid) {
      DebugUtils.error(MODULE_NAME, '‚ùå Product definitions validation failed:', {
        errors: validation.errors,
        invalidProducts: validation.invalidProducts
      })

      // –í dev —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.error('=== PRODUCT DEFINITIONS VALIDATION ERRORS ===')
      validation.errors.forEach(error => console.error('‚ùå', error))

      if (validation.warnings.length > 0) {
        console.warn('=== WARNINGS ===')
        validation.warnings.forEach(warning => console.warn('‚ö†Ô∏è', warning))
      }
    } else {
      DebugUtils.info(MODULE_NAME, '‚úÖ All product definitions are valid', {
        validProducts: validation.validProducts,
        warnings: validation.warnings.length
      })

      if (validation.warnings.length > 0) {
        DebugUtils.warn(MODULE_NAME, 'Product definition warnings:', validation.warnings)
      }
    }
  }

  // =============================================
  // PRODUCTS STORE DATA
  // =============================================

  getProductsStoreData() {
    if (!this.productsData) {
      this.productsData = this.generateProductsData()
    }
    return this.productsData
  }

  getProductDefinition(productId: string): CoreProductDefinition | undefined {
    return CORE_PRODUCTS.find(p => p.id === productId)
  }

  // =============================================
  // ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–î–£–ö–¢–û–í –° –ë–ê–ó–û–í–´–ú–ò –ï–î–ò–ù–ò–¶–ê–ú–ò
  // =============================================

  private generateProductsData() {
    DebugUtils.info(MODULE_NAME, 'üõçÔ∏è Generating products data with base units')

    const products = this.generateEnhancedProducts()
    const priceHistory = this.generateEnhancedPriceHistory()

    const result = {
      products,
      priceHistory
    }

    DebugUtils.info(MODULE_NAME, '‚úÖ Products data generated', {
      total: products.length,
      sellable: products.filter(p => p.canBeSold).length,
      rawMaterials: products.filter(p => !p.canBeSold).length,
      priceRecords: priceHistory.length,
      baseUnitsUsed: this.getBaseUnitsStats(products)
    })

    // –í dev —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤
    if (import.meta.env.DEV) {
      this.demonstrateCorrectCalculations(products)
    }

    return result
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
   */
  private generateEnhancedProducts(): Product[] {
    const now = new Date().toISOString()

    return CORE_PRODUCTS.map(productDef => {
      // ‚úÖ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: Product —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
      const product = {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        id: productDef.id,
        name: productDef.name,
        nameEn: productDef.nameEn,
        description: this.generateDescription(productDef),
        category: productDef.category,

        // ‚úÖ –ë–ê–ó–û–í–´–ï –ï–î–ò–ù–ò–¶–´ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        baseUnit: productDef.baseUnit, // gram, ml, –∏–ª–∏ piece
        baseCostPerUnit: productDef.baseCostPerUnit, // IDR –∑–∞ –≥—Ä–∞–º–º/–º–ª/—à—Ç—É–∫—É

        // ‚úÖ –ï–î–ò–ù–ò–¶–´ –ó–ê–ö–£–ü–ö–ò (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞)
        purchaseUnit: productDef.purchaseUnit, // –∫–≥, –ª–∏—Ç—Ä, —É–ø–∞–∫–æ–≤–∫–∞
        purchaseToBaseRatio: productDef.purchaseToBaseRatio, // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        purchaseCost: productDef.purchaseCost, // IDR –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∑–∞–∫—É–ø–∫–∏

        // ‚úÖ –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        costPerUnit: productDef.purchaseCost, // –¶–µ–Ω–∞ –∑–∞ purchaseUnit (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        currentCostPerUnit: productDef.baseCostPerUnit, // –¶–µ–Ω–∞ –∑–∞ baseUnit

        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        yieldPercentage: productDef.yieldPercentage,
        canBeSold: productDef.canBeSold,
        isActive: true,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        storageConditions: this.getStorageConditions(productDef.category),
        shelfLife: productDef.shelfLifeDays,
        minStock: this.calculateMinStock(productDef),
        maxStock: this.calculateMaxStock(productDef),
        leadTimeDays: productDef.leadTimeDays,
        primarySupplierId: productDef.primarySupplierId,
        tags: this.generateTags(productDef),

        createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
        updatedAt: now
      } as Product & {
        baseUnit: 'gram' | 'ml' | 'piece'
        baseCostPerUnit: number
        purchaseUnit: string
        purchaseToBaseRatio: number
        purchaseCost: number
        currentCostPerUnit: number
      }

      // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const expectedBaseCost = productDef.purchaseCost / productDef.purchaseToBaseRatio
      if (Math.abs(expectedBaseCost - productDef.baseCostPerUnit) > 0.01) {
        DebugUtils.error(MODULE_NAME, `‚ùå Base cost calculation error for ${productDef.name}`, {
          expected: expectedBaseCost,
          actual: productDef.baseCostPerUnit,
          purchaseCost: productDef.purchaseCost,
          ratio: productDef.purchaseToBaseRatio
        })
      }

      return product as Product
    })
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
   */
  private generateEnhancedPriceHistory(): ProductPriceHistory[] {
    const now = new Date().toISOString()

    return CORE_PRODUCTS.map(productDef => ({
      id: `price-${productDef.id}-current`,
      productId: productDef.id,

      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –¶–µ–Ω–∞ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
      basePricePerUnit: productDef.baseCostPerUnit, // IDR –∑–∞ –≥—Ä–∞–º–º/–º–ª/—à—Ç—É–∫—É

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–µ
      purchasePrice: productDef.purchaseCost, // IDR –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∑–∞–∫—É–ø–∫–∏
      purchaseUnit: productDef.purchaseUnit, // –∫–≥, –ª–∏—Ç—Ä, —É–ø–∞–∫–æ–≤–∫–∞
      purchaseQuantity: productDef.purchaseToBaseRatio, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤ —É–ø–∞–∫–æ–≤–∫–µ

      effectiveDate: now,
      sourceType: 'manual_update' as const,
      notes: `Base cost: ${productDef.baseCostPerUnit} IDR/${productDef.baseUnit}`,
      createdAt: now,
      updatedAt: now
    })) as ProductPriceHistory[]
  }

  // =============================================
  // –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–´–• –†–ê–°–ß–ï–¢–û–í
  // =============================================

  private demonstrateCorrectCalculations(products: Product[]): void {
    console.log('\n' + '='.repeat(60))
    console.log('üßÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ê–°–ß–ï–¢–ê –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò')
    console.log('='.repeat(60))

    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const oliveOil = products.find(p => p.id === 'prod-olive-oil')
    const garlic = products.find(p => p.id === 'prod-garlic')
    const salt = products.find(p => p.id === 'prod-salt')
    const pepper = products.find(p => p.id === 'prod-black-pepper')

    if (oliveOil && garlic && salt && pepper) {
      console.log('\nüìù –†–ï–¶–ï–ü–¢: –ó–∞–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–∞–ª–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è')
      console.log('–í—ã—Ö–æ–¥: 130 –º–ª\n')

      console.log('–ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:')

      // –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ: 120 –º–ª
      const oilCost = 120 * (oliveOil as any).baseCostPerUnit
      console.log(
        `‚Ä¢ Olive Oil: 120 –º–ª √ó ${(oliveOil as any).baseCostPerUnit} IDR/–º–ª = ${oilCost} IDR`
      )

      // –ß–µ—Å–Ω–æ–∫: 10 –≥
      const garlicCost = 10 * (garlic as any).baseCostPerUnit
      console.log(`‚Ä¢ Garlic: 10 –≥ √ó ${(garlic as any).baseCostPerUnit} IDR/–≥ = ${garlicCost} IDR`)

      // –°–æ–ª—å: 3 –≥
      const saltCost = 3 * (salt as any).baseCostPerUnit
      console.log(`‚Ä¢ Salt: 3 –≥ √ó ${(salt as any).baseCostPerUnit} IDR/–≥ = ${saltCost} IDR`)

      // –ü–µ—Ä–µ—Ü: 1 –≥
      const pepperCost = 1 * (pepper as any).baseCostPerUnit
      console.log(
        `‚Ä¢ Black Pepper: 1 –≥ √ó ${(pepper as any).baseCostPerUnit} IDR/–≥ = ${pepperCost} IDR`
      )

      const totalCost = oilCost + garlicCost + saltCost + pepperCost
      const costPerMl = totalCost / 130

      console.log(`\nüìä –ò–¢–û–ì–û: ${totalCost} IDR`)
      console.log(`üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º–ª: ${costPerMl.toFixed(2)} IDR/–º–ª`)

      console.log('\n‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!')
    }

    console.log('\n' + '='.repeat(60))
  }

  // =============================================
  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –£–¢–ò–õ–ò–¢–´
  // =============================================

  private getBaseUnitsStats(products: Product[]): Record<string, number> {
    const stats = { gram: 0, ml: 0, piece: 0 }

    products.forEach(product => {
      const baseUnit = (product as any).baseUnit
      if (baseUnit && stats.hasOwnProperty(baseUnit)) {
        stats[baseUnit]++
      }
    })

    return stats
  }

  private generateDescription(productDef: CoreProductDefinition): string {
    const baseDescriptions: Record<string, string> = {
      meat: 'Premium quality meat for restaurant preparation',
      vegetables: 'Fresh vegetables sourced from local suppliers',
      dairy: 'Fresh dairy products with proper storage requirements',
      spices: 'High-quality spices and seasonings',
      beverages: 'Ready-to-serve beverages for direct sale',
      other: 'Quality ingredient for food preparation'
    }

    const baseDesc = baseDescriptions[productDef.category] || 'Quality product for restaurant use'

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–∏–Ω–∏—Ü–∞—Ö
    const unitInfo = `Price: ${productDef.baseCostPerUnit} IDR/${productDef.baseUnit} (${productDef.purchaseCost} IDR/${productDef.purchaseUnit})`

    return `${baseDesc}. ${unitInfo}`
  }

  private getStorageConditions(category: string): string {
    const conditions: Record<string, string> = {
      meat: 'Refrigerator +2¬∞C to +4¬∞C',
      dairy: 'Refrigerator +2¬∞C to +6¬∞C',
      vegetables: 'Cool dry place',
      beverages: 'Room temperature or refrigerated',
      spices: 'Dry place, room temperature',
      other: 'As per packaging instructions'
    }
    return conditions[category] || 'Room temperature'
  }

  private calculateMinStock(productDef: CoreProductDefinition): number {
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: daily consumption * lead time * safety factor
    return Math.round(productDef.dailyConsumption * productDef.leadTimeDays * 1.5 * 100) / 100
  }

  private calculateMaxStock(productDef: CoreProductDefinition): number {
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: min stock * 3
    return Math.round(this.calculateMinStock(productDef) * 3 * 100) / 100
  }

  private generateTags(productDef: CoreProductDefinition): string[] {
    const tags: string[] = []

    if (productDef.canBeSold) {
      tags.push('direct-sale')
    } else {
      tags.push('raw-material')
    }

    if (productDef.shelfLifeDays <= 7) {
      tags.push('perishable')
    }

    if (productDef.priceVolatility > 0.08) {
      tags.push('volatile-price')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –±–∞–∑–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã
    tags.push(`base-unit-${productDef.baseUnit}`)

    tags.push(productDef.category)

    return tags
  }

  // =============================================
  // –ë–£–î–£–©–ò–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–†–£–ì–ò–• STORES
  // =============================================

  getSupplierStoreData() {
    DebugUtils.debug(MODULE_NAME, 'üì¶ Supplier data not implemented yet')
    return {
      orders: [],
      receipts: []
    }
  }

  getStorageStoreData() {
    DebugUtils.debug(MODULE_NAME, 'üè™ Storage data not implemented yet')
    return {
      operations: [],
      batches: []
    }
  }

  getRecipeStoreData() {
    DebugUtils.debug(MODULE_NAME, 'üë®‚Äçüç≥ Recipe data not implemented yet')
    return {
      recipes: [],
      preparations: []
    }
  }

  // =============================================
  // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
  // =============================================

  /**
   * ‚úÖ –ù–û–í–´–ô: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  testCostCalculation(): void {
    const products = this.getProductsStoreData().products

    console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò')
    console.log('='.repeat(50))

    // –¢–µ—Å—Ç 1: –°–∞–ª–∞—Ç–Ω–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞
    this.testSaladDressingCalculation(products)

    // –¢–µ—Å—Ç 2: –°—Ç–µ–π–∫
    this.testSteakCalculation(products)

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!')
  }

  private testSaladDressingCalculation(products: Product[]): void {
    console.log('\nüìù –¢–ï–°–¢ 1: –ó–∞–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–∞–ª–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è')
    console.log('–†–µ—Ü–µ–ø—Ç: 120–º–ª –º–∞—Å–ª–∞ + 10–≥ —á–µ—Å–Ω–æ–∫–∞ + 3–≥ —Å–æ–ª–∏ + 1–≥ –ø–µ—Ä—Ü–∞')
    console.log('–í—ã—Ö–æ–¥: 130 –º–ª')

    const oliveOil = products.find(p => p.id === 'prod-olive-oil')!
    const garlic = products.find(p => p.id === 'prod-garlic')!
    const salt = products.find(p => p.id === 'prod-salt')!
    const pepper = products.find(p => p.id === 'prod-black-pepper')!

    const oilCost = 120 * (oliveOil as any).baseCostPerUnit
    const garlicCost = 10 * (garlic as any).baseCostPerUnit
    const saltCost = 3 * (salt as any).baseCostPerUnit
    const pepperCost = 1 * (pepper as any).baseCostPerUnit

    const totalCost = oilCost + garlicCost + saltCost + pepperCost
    const costPerMl = totalCost / 130

    console.log(`Olive Oil: 120–º–ª √ó ${(oliveOil as any).baseCostPerUnit} = ${oilCost} IDR`)
    console.log(`Garlic: 10–≥ √ó ${(garlic as any).baseCostPerUnit} = ${garlicCost} IDR`)
    console.log(`Salt: 3–≥ √ó ${(salt as any).baseCostPerUnit} = ${saltCost} IDR`)
    console.log(`Pepper: 1–≥ √ó ${(pepper as any).baseCostPerUnit} = ${pepperCost} IDR`)
    console.log(`–ò–¢–û–ì–û: ${totalCost} IDR (${costPerMl.toFixed(2)} IDR/–º–ª)`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    const expectedOilCost = 120 * 85 // 120–º–ª √ó 85 IDR/–º–ª
    const expectedGarlicCost = 10 * 25 // 10–≥ √ó 25 IDR/–≥
    const expectedSaltCost = 3 * 3 // 3–≥ √ó 3 IDR/–≥
    const expectedPepperCost = 1 * 120 // 1–≥ √ó 120 IDR/–≥
    const expectedTotal =
      expectedOilCost + expectedGarlicCost + expectedSaltCost + expectedPepperCost

    if (Math.abs(totalCost - expectedTotal) < 0.01) {
      console.log('‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!')
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–∏ ${expectedTotal}, –ø–æ–ª—É—á–∏–ª–∏ ${totalCost}`)
    }
  }

  private testSteakCalculation(products: Product[]): void {
    console.log('\nüìù –¢–ï–°–¢ 2: –°—Ç–µ–π–∫ –≥–æ–≤—è–∂–∏–π')
    console.log('–†–µ—Ü–µ–ø—Ç: 250–≥ –≥–æ–≤—è–¥–∏–Ω—ã + 10–º–ª –º–∞—Å–ª–∞ + 3–≥ —Å–æ–ª–∏ + 2–≥ –ø–µ—Ä—Ü–∞')
    console.log('–í—ã—Ö–æ–¥: 1 –ø–æ—Ä—Ü–∏—è')

    const beef = products.find(p => p.id === 'prod-beef-steak')!
    const oliveOil = products.find(p => p.id === 'prod-olive-oil')!
    const salt = products.find(p => p.id === 'prod-salt')!
    const pepper = products.find(p => p.id === 'prod-black-pepper')!

    const beefCost = 250 * (beef as any).baseCostPerUnit
    const oilCost = 10 * (oliveOil as any).baseCostPerUnit
    const saltCost = 3 * (salt as any).baseCostPerUnit
    const pepperCost = 2 * (pepper as any).baseCostPerUnit

    const totalCost = beefCost + oilCost + saltCost + pepperCost

    console.log(`Beef: 250–≥ √ó ${(beef as any).baseCostPerUnit} = ${beefCost} IDR`)
    console.log(`Olive Oil: 10–º–ª √ó ${(oliveOil as any).baseCostPerUnit} = ${oilCost} IDR`)
    console.log(`Salt: 3–≥ √ó ${(salt as any).baseCostPerUnit} = ${saltCost} IDR`)
    console.log(`Pepper: 2–≥ √ó ${(pepper as any).baseCostPerUnit} = ${pepperCost} IDR`)
    console.log(`–ò–¢–û–ì–û: ${totalCost} IDR –∑–∞ –ø–æ—Ä—Ü–∏—é`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    const expectedBeefCost = 250 * 180 // 250–≥ √ó 180 IDR/–≥
    const expectedOilCost = 10 * 85 // 10–º–ª √ó 85 IDR/–º–ª
    const expectedSaltCost = 3 * 3 // 3–≥ √ó 3 IDR/–≥
    const expectedPepperCost = 2 * 120 // 2–≥ √ó 120 IDR/–≥
    const expectedTotal = expectedBeefCost + expectedOilCost + expectedSaltCost + expectedPepperCost

    if (Math.abs(totalCost - expectedTotal) < 0.01) {
      console.log('‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!')
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–∏ ${expectedTotal}, –ø–æ–ª—É—á–∏–ª–∏ ${totalCost}`)
    }
  }

  /**
   * ‚úÖ –ù–û–í–´–ô: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  compareOldVsNewCalculation(): void {
    console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–†–û–ô –ò –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –†–ê–°–ß–ï–¢–ê')
    console.log('='.repeat(60))

    const products = this.getProductsStoreData().products
    const oliveOil = products.find(p => p.id === 'prod-olive-oil')!

    console.log('\nüî¥ –°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø):')
    console.log('Olive Oil: 250 –≥—Ä–∞–º–º √ó 85,000 IDR/–ª–∏—Ç—Ä = 21,250,000 IDR ‚ùå')
    console.log('(–û—à–∏–±–∫–∞: —É–º–Ω–æ–∂–∞–µ–º –≥—Ä–∞–º–º—ã –Ω–∞ —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä)')

    console.log('\nüü¢ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø):')
    console.log(
      `Olive Oil: 250 –º–ª √ó ${(oliveOil as any).baseCostPerUnit} IDR/–º–ª = ${250 * (oliveOil as any).baseCostPerUnit} IDR ‚úÖ`
    )
    console.log('(–ü—Ä–∞–≤–∏–ª—å–Ω–æ: —É–º–Ω–æ–∂–∞–µ–º –º–ª –Ω–∞ —Ü–µ–Ω—É –∑–∞ –º–ª)')

    console.log('\nüí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:')
    console.log(`‚Ä¢ baseCostPerUnit = ${(oliveOil as any).baseCostPerUnit} IDR/–º–ª`)
    console.log(`‚Ä¢ purchaseCost = ${(oliveOil as any).purchaseCost} IDR/–ª–∏—Ç—Ä`)
    console.log(
      `‚Ä¢ purchaseToBaseRatio = ${(oliveOil as any).purchaseToBaseRatio} (1 –ª–∏—Ç—Ä = 1000 –º–ª)`
    )
    console.log(
      `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${(oliveOil as any).purchaseCost} √∑ ${(oliveOil as any).purchaseToBaseRatio} = ${(oliveOil as any).baseCostPerUnit} ‚úÖ`
    )
  }

  /**
   * ‚úÖ –ù–û–í–´–ô: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
   */
  validateProductsForCalculation(): {
    valid: CoreProductDefinition[]
    invalid: Array<{ product: CoreProductDefinition; errors: string[] }>
    summary: {
      totalProducts: number
      validProducts: number
      invalidProducts: number
      errorCount: number
    }
  } {
    console.log('\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–î–£–ö–¢–û–í –î–õ–Ø –†–ê–°–ß–ï–¢–û–í')
    console.log('='.repeat(40))

    const valid: CoreProductDefinition[] = []
    const invalid: Array<{ product: CoreProductDefinition; errors: string[] }> = []

    CORE_PRODUCTS.forEach(product => {
      const errors: string[] = []

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const expectedBaseCost = product.purchaseCost / product.purchaseToBaseRatio
      if (Math.abs(expectedBaseCost - product.baseCostPerUnit) > 0.01) {
        errors.push(
          `Base cost mismatch: expected ${expectedBaseCost}, got ${product.baseCostPerUnit}`
        )
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (product.baseCostPerUnit <= 0) {
        errors.push('baseCostPerUnit must be positive')
      }

      if (product.purchaseCost <= 0) {
        errors.push('purchaseCost must be positive')
      }

      if (product.purchaseToBaseRatio <= 0) {
        errors.push('purchaseToBaseRatio must be positive')
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –í–∞–ª–∏–¥–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
      if (!['gram', 'ml', 'piece'].includes(product.baseUnit)) {
        errors.push(`Invalid baseUnit: ${product.baseUnit}`)
      }

      if (errors.length === 0) {
        valid.push(product)
        console.log(`‚úÖ ${product.name}`)
      } else {
        invalid.push({ product, errors })
        console.log(`‚ùå ${product.name}:`)
        errors.forEach(error => console.log(`   - ${error}`))
      }
    })

    const summary = {
      totalProducts: CORE_PRODUCTS.length,
      validProducts: valid.length,
      invalidProducts: invalid.length,
      errorCount: invalid.reduce((sum, item) => sum + item.errors.length, 0)
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:')
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${summary.totalProducts}`)
    console.log(`–í–∞–ª–∏–¥–Ω—ã—Ö: ${summary.validProducts}`)
    console.log(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${summary.invalidProducts}`)
    console.log(`–û—à–∏–±–æ–∫: ${summary.errorCount}`)

    return { valid, invalid, summary }
  }
}

// Singleton instance
export const mockDataCoordinator = new MockDataCoordinator()

// =============================================
// DEV HELPERS
// =============================================

if (import.meta.env.DEV) {
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  window.__MOCK_DATA_COORDINATOR__ = mockDataCoordinator

  window.__TEST_COST_CALCULATIONS__ = () => {
    mockDataCoordinator.testCostCalculation()
    return mockDataCoordinator
  }

  window.__COMPARE_OLD_VS_NEW__ = () => {
    mockDataCoordinator.compareOldVsNewCalculation()
    return mockDataCoordinator
  }

  window.__VALIDATE_PRODUCTS__ = () => {
    return mockDataCoordinator.validateProductsForCalculation()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ dev —Ä–µ–∂–∏–º–µ
  setTimeout(() => {
    console.log('\nüéØ Mock Data Coordinator –∑–∞–≥—Ä—É–∂–µ–Ω!')
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')
    console.log('‚Ä¢ window.__TEST_COST_CALCULATIONS__() - —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–æ–≤')
    console.log('‚Ä¢ window.__COMPARE_OLD_VS_NEW__() - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º')
    console.log('‚Ä¢ window.__VALIDATE_PRODUCTS__() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
  }, 100)
}
