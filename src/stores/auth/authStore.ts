// src/stores/auth/authStore.ts - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { User, UserRole } from './auth'
import { CoreUserService } from '@/core/users' // üÜï –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import { DebugUtils } from '@/utils'
import { AuthSessionService } from './services'

const MODULE_NAME = 'AuthStore'

export const useAuthStore = defineStore('auth', () => {
  const state = ref({
    currentUser: null as User | null,
    isAuthenticated: false,
    isLoading: false,
    error: null as string | null,
    lastLoginAt: null as string | null
  })

  // ===== –ì–ï–¢–¢–ï–†–´ =====
  const currentUser = computed(() => state.value.currentUser)
  const isAuthenticated = computed(() => state.value.isAuthenticated)
  const isLoading = computed(() => state.value.isLoading)
  const userName = computed(() => state.value.currentUser?.name || '')
  const userId = computed(() => state.value.currentUser?.id || '')
  const userRoles = computed<UserRole[]>(() => state.value.currentUser?.roles || [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
  const isAdmin = computed(() => userRoles.value.includes('admin'))
  const isManager = computed(() => userRoles.value.includes('manager'))
  const isCashier = computed(() => userRoles.value.includes('cashier'))

  // üÜï –ù–û–í–´–ï –ì–ï–¢–¢–ï–†–´ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CoreUserService
  const canEdit = computed(() => CoreUserService.canEdit(userRoles.value))
  const canViewFinances = computed(() => CoreUserService.canViewFinances(userRoles.value))

  // ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
  async function login(pin: string): Promise<boolean> {
    try {
      state.value.isLoading = true
      state.value.error = null

      DebugUtils.info(MODULE_NAME, 'Login attempt', { pin: '***' })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (AuthSessionService.isSecurityLocked()) {
        throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      }

      const userData = CoreUserService.findByPin(pin)
      if (!userData) {
        // üÜï –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        AuthSessionService.logLoginAttempt({
          timestamp: new Date().toISOString(),
          userId: 'unknown',
          pin: '***',
          success: false,
          appType: 'backoffice',
          ip: window.location.hostname
        })

        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π PIN –∫–æ–¥')
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID
      const user: User = {
        id: `user_${Date.now()}`,
        ...userData,
        lastLoginAt: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      state.value.currentUser = user
      state.value.isAuthenticated = true
      state.value.lastLoginAt = user.lastLoginAt

      // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage
      AuthSessionService.saveSession(user, 'backoffice')

      // üÜï –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      AuthSessionService.logLoginAttempt({
        timestamp: new Date().toISOString(),
        userId: user.id,
        pin: '***',
        success: true,
        appType: 'backoffice',
        ip: window.location.hostname
      })

      DebugUtils.info(MODULE_NAME, 'Login successful with session saved', {
        userId: user.id,
        roles: user.roles
      })

      return true
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      state.value.error = errorMessage

      DebugUtils.error(MODULE_NAME, 'Login failed', { error: errorMessage })
      return false
    } finally {
      state.value.isLoading = false
    }
  }

  async function logout() {
    try {
      DebugUtils.info(MODULE_NAME, 'Logging out', { userId: userId.value })

      // üÜï –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      AuthSessionService.clearSession()

      resetState()
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Logout failed', { error })
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å App.vue)
   */
  function checkSession(): boolean {
    try {
      // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      const session = AuthSessionService.getSession()

      if (session && session.user) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        state.value.currentUser = session.user
        state.value.isAuthenticated = true
        state.value.lastLoginAt = session.user.lastLoginAt

        DebugUtils.info(MODULE_NAME, 'Session restored from localStorage', {
          userId: session.user.id,
          roles: session.user.roles
        })

        return true
      }

      DebugUtils.debug(MODULE_NAME, 'No valid session found')
      return false
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Session check failed', { error })
      return false
    }
  }

  // 5. –î–û–ë–ê–í–ò–¢–¨ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
  function getSessionInfo() {
    return AuthSessionService.getSessionInfo()
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å appInitializer)
   */
  async function initializeDefaultUsers(): Promise<void> {
    try {
      const availableUsers = CoreUserService.getActiveUsers()
      DebugUtils.info(MODULE_NAME, 'Default users initialized', {
        count: availableUsers.length,
        users: availableUsers.map(u => ({
          name: u.name,
          roles: u.roles
        }))
      })
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to initialize default users', { error })
      throw error
    }
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  function getDefaultRoute(): string {
    return CoreUserService.getDefaultRoute(userRoles.value)
  }

  function resetState() {
    state.value = {
      currentUser: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      lastLoginAt: null
    }
  }

  function clearError() {
    state.value.error = null
  }

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) =====
  function initialize() {
    // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ localStorage –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    DebugUtils.info(MODULE_NAME, 'AuthStore initialized')
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store
  initialize()

  return {
    // State
    state,

    // Getters
    currentUser,
    isAuthenticated,
    isLoading,
    userName,
    userId,
    userRoles,
    isAdmin,
    isManager,
    isCashier,
    canEdit,
    canViewFinances,

    // Actions
    login,
    logout,
    getDefaultRoute,
    clearError,
    resetState,
    checkSession, // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
    initializeDefaultUsers,
    getSessionInfo
  }
})
