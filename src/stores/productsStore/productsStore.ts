// src/stores/productsStore/productsStore.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

import { defineStore } from 'pinia'
import type {
  ProductsState,
  Product,
  CreateProductData,
  UpdateProductData,
  PackageOption,
  CreatePackageOptionDto,
  UpdatePackageOptionDto,
  BaseUnit,
  ProductForSupplier,
  ProductForMenu,
  Department
} from './types'
import { DebugUtils } from '@/utils'
import type { ProductForRecipe } from '@/stores/recipes/types'
import type { MeasurementUnit } from '@/types/measurementUnits'

const MODULE_NAME = 'ProductsStore'

export const useProductsStore = defineStore('products', {
  state: (): ProductsState => ({
    products: [],
    loading: false,
    error: null,
    selectedProduct: null,
    useMockMode: false,
    filters: {
      category: 'all',
      isActive: 'all',
      canBeSold: 'all',
      search: '',
      department: 'all',
      needsReorder: false,
      urgencyLevel: 'all'
    }
  }),

  getters: {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–µ—Ç—Ç–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    filteredProducts: (state): Product[] => {
      let filtered = [...state.products]

      if (state.filters.category !== 'all') {
        filtered = filtered.filter(product => product.category === state.filters.category)
      }

      if (state.filters.isActive !== 'all') {
        filtered = filtered.filter(product => product.isActive === state.filters.isActive)
      }
      if (state.filters.department !== 'all') {
        filtered = filtered.filter(product =>
          product.usedInDepartments.includes(state.filters.department as Department)
        )
      }
      if (state.filters.search) {
        const searchTerm = state.filters.search.toLowerCase()
        filtered = filtered.filter(
          product =>
            product.name.toLowerCase().includes(searchTerm) ||
            (product as any).nameEn?.toLowerCase().includes(searchTerm) ||
            product.description?.toLowerCase().includes(searchTerm)
        )
      }

      return filtered.sort((a, b) => a.name.localeCompare(b.name))
    },

    sellableProducts: (state): Product[] => {
      return state.products.filter(product => product.isActive && product.canBeSold)
    },

    rawMaterials: (state): Product[] => {
      return state.products.filter(product => product.isActive && !product.canBeSold)
    }
  },

  actions: {
    // =============================================
    // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    // =============================================

    async loadProducts(useMock = false): Promise<void> {
      try {
        this.loading = true
        this.error = null
        this.useMockMode = useMock

        DebugUtils.info(MODULE_NAME, 'üõçÔ∏è Loading products', { useMock })

        if (useMock) {
          // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
          const { mockDataCoordinator } = await import('@/stores/shared')
          const data = mockDataCoordinator.getProductsStoreData()

          this.products = data.products

          DebugUtils.info(MODULE_NAME, '‚úÖ Products loaded from coordinator', {
            products: this.products.length
          })
        } else {
          // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firebase (–ø–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
          const { productsService } = await import('./productsService')
          this.products = await productsService.getAll()
          DebugUtils.info(MODULE_NAME, '‚úÖ Products loaded from Firebase', {
            count: this.products.length
          })
        }

        if (import.meta.env.DEV) {
          this.setupDevDebugFunctions()
        }
      } catch (error) {
        DebugUtils.error(MODULE_NAME, '‚ùå Error loading products', { error })
        this.error = 'Failed to load products'
        throw error
      } finally {
        this.loading = false
      }
    },

    async createProduct(data: CreateProductData): Promise<Product> {
      try {
        this.loading = true
        this.error = null

        const now = new Date().toISOString()

        // ‚úÖ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É
        const basePackage: PackageOption = {
          id: `pkg-base-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          productId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
          packageName: this.getDefaultPackageName(data.baseUnit),
          packageSize: this.getDefaultPackageSize(data.baseUnit),
          packageUnit: this.getDefaultPackageUnit(data.baseUnit),
          packagePrice: data.baseCostPerUnit * this.getDefaultPackageSize(data.baseUnit),
          baseCostPerUnit: data.baseCostPerUnit,
          isActive: true,
          createdAt: now,
          updatedAt: now
        }

        let newProduct: Product

        if (this.useMockMode) {
          const productId = `prod-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π productId –≤ —É–ø–∞–∫–æ–≤–∫–µ
          basePackage.productId = productId

          newProduct = {
            id: productId,
            ...data,
            isActive: data.isActive ?? true,
            canBeSold: data.canBeSold ?? false,
            packageOptions: [basePackage], // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É
            recommendedPackageId: basePackage.id,
            createdAt: now,
            updatedAt: now
          } as Product
        } else {
          const { productsService } = await import('./productsService')
          newProduct = await productsService.createProduct(data)

          // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É
          basePackage.productId = newProduct.id
          newProduct.packageOptions = [basePackage]
          newProduct.recommendedPackageId = basePackage.id
        }

        this.products.push(newProduct)

        DebugUtils.info(MODULE_NAME, 'Product created with base package', {
          id: newProduct.id,
          basePackageId: basePackage.id,
          packageName: basePackage.packageName
        })

        return newProduct
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error creating product', { error, data })
        this.error = 'Failed to create product'
        throw error
      } finally {
        this.loading = false
      }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫
    getDefaultPackageName(baseUnit: BaseUnit): string {
      switch (baseUnit) {
        case 'gram':
          return '–ö–∏–ª–æ–≥—Ä–∞–º–º'
        case 'ml':
          return '–õ–∏—Ç—Ä'
        case 'piece':
          return '–®—Ç—É–∫–∞'
      }
    },

    getDefaultPackageSize(baseUnit: BaseUnit): number {
      switch (baseUnit) {
        case 'gram':
          return 1000
        case 'ml':
          return 1000
        case 'piece':
          return 1
      }
    },

    getDefaultPackageUnit(baseUnit: BaseUnit): MeasurementUnit {
      switch (baseUnit) {
        case 'gram':
          return 'kg'
        case 'ml':
          return 'liter'
        case 'piece':
          return 'piece'
      }
    },

    async updateProduct(data: UpdateProductData): Promise<void> {
      try {
        this.loading = true
        this.error = null

        DebugUtils.info(MODULE_NAME, 'Updating product', { data, mockMode: this.useMockMode })

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.updateProduct(data)
        }

        const index = this.products.findIndex(p => p.id === data.id)
        if (index !== -1) {
          this.products[index] = {
            ...this.products[index],
            ...data,
            updatedAt: new Date().toISOString()
          }
        }

        DebugUtils.info(MODULE_NAME, 'Product updated', { id: data.id })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error updating product', { error, data })
        this.error = 'Failed to update product'
        throw error
      } finally {
        this.loading = false
      }
    },

    // =============================================
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
    // =============================================

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Recipe Store —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
     */
    getProductForRecipe(productId: string): ProductForRecipe | null {
      const product = this.getProductById(productId)

      if (!product) {
        DebugUtils.warn(MODULE_NAME, `Product not found: ${productId}`)
        return null
      }

      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
      return {
        id: product.id,
        name: product.name,
        nameEn: product.nameEn || product.name,
        baseUnit: product.baseUnit, // –í—Å–µ–≥–¥–∞ –±–∞–∑–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞
        baseCostPerUnit: product.baseCostPerUnit, // –¶–µ–Ω–∞ –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
        category: product.category,
        isActive: product.isActive,
        // Deprecated –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        unit: product.baseUnit as MeasurementUnit,
        costPerUnit: product.baseCostPerUnit
      }
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Menu Store
     */
    getProductForMenu(productId: string): ProductForMenu | null {
      const product = this.getProductById(productId)

      if (!product) {
        DebugUtils.warn(MODULE_NAME, `Product not found: ${productId}`)
        return null
      }

      return {
        id: product.id,
        name: product.name,
        nameEn: product.nameEn || product.name,
        canBeSold: product.canBeSold,
        currentCostPerUnit: product.baseCostPerUnit, // –¶–µ–Ω–∞ –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
        unit: product.baseUnit as MeasurementUnit // –ë–∞–∑–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞
      }
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Supplier Store —Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏
     */
    getProductForSupplier(productId: string): ProductForSupplier | null {
      const product = this.getProductById(productId)

      if (!product) {
        DebugUtils.warn(MODULE_NAME, `Product not found: ${productId}`)
        return null
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —É–ø–∞–∫–æ–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞
      const recommendedPackage = this.getRecommendedPackage(productId)

      return {
        id: product.id,
        name: product.name,
        nameEn: product.nameEn || product.name,
        currentCostPerUnit: product.baseCostPerUnit,
        recommendedOrderQuantity: 0,
        urgencyLevel: 'medium',
        primarySupplierId: product.primarySupplierId,
        leadTimeDays: product.leadTimeDays,
        baseUnit: product.baseUnit,
        recommendedPackage: recommendedPackage || undefined,
        packageOptions: product.packageOptions || [] // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω fallback
      }
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–∏—Ç—å baseCostPerUnit –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async updateProductCost(productId: string, newBaseCost: number): Promise<void> {
      try {
        const product = this.getProductById(productId)
        if (!product) {
          throw new Error('Product not found')
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
        const productIndex = this.products.findIndex(p => p.id === productId)
        if (productIndex !== -1) {
          this.products[productIndex].baseCostPerUnit = newBaseCost
          this.products[productIndex].updatedAt = new Date().toISOString()

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —É–ø–∞–∫–æ–≤–∫–µ
          if (product.recommendedPackageId) {
            const packageIndex = this.products[productIndex].packageOptions.findIndex(
              pkg => pkg.id === product.recommendedPackageId
            )
            if (packageIndex !== -1) {
              this.products[productIndex].packageOptions[packageIndex].baseCostPerUnit = newBaseCost
              this.products[productIndex].packageOptions[packageIndex].updatedAt =
                new Date().toISOString()
            }
          }
        }

        DebugUtils.info(MODULE_NAME, 'Product cost updated', { productId, newBaseCost })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error updating product cost', { error })
        throw error
      }
    },

    /**
     * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
     */
    getProductForOrder(productId: string): {
      product: Product
      recommendedPackage: PackageOption
      baseUnit: BaseUnit
      baseCostPerUnit: number
    } | null {
      const product = this.getProductById(productId)
      if (!product) return null

      const recommendedPackage = this.getRecommendedPackage(productId)
      if (!recommendedPackage) {
        DebugUtils.warn(MODULE_NAME, `No package options for product: ${productId}`)
        return null
      }

      return {
        product,
        recommendedPackage,
        baseUnit: product.baseUnit,
        baseCostPerUnit: product.baseCostPerUnit
      }
    },

    /**
     * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–ø–∞–∫–æ–≤–∫–∏ —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    getBestPricePackages(): Array<{
      productId: string
      productName: string
      bestPackage: PackageOption
      savings: number // —Å–∫–æ–ª—å–∫–æ —ç–∫–æ–Ω–æ–º–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    }> {
      return this.products
        .map(product => {
          if (product.packageOptions.length < 2) return null

          const packages = product.packageOptions.filter(pkg => pkg.isActive)
          const bestPackage = packages.reduce((best, current) =>
            current.baseCostPerUnit < best.baseCostPerUnit ? current : best
          )
          const worstPackage = packages.reduce((worst, current) =>
            current.baseCostPerUnit > worst.baseCostPerUnit ? current : worst
          )

          if (bestPackage.id === worstPackage.id) return null

          const savings =
            ((worstPackage.baseCostPerUnit - bestPackage.baseCostPerUnit) /
              worstPackage.baseCostPerUnit) *
            100

          return {
            productId: product.id,
            productName: product.name,
            bestPackage,
            savings
          }
        })
        .filter(Boolean) as Array<{
        productId: string
        productName: string
        bestPackage: PackageOption
        savings: number
      }>
    },

    /**
     * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –Ω–æ–≤—ã–π
     */
    migrateOldProductToNew(product: Product): ProductForRecipe {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const getBaseUnit = (): 'gram' | 'ml' | 'piece' => {
        const unit = (product as any).unit
        const category = product.category.toLowerCase()

        // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (['meat', 'vegetables', 'spices', 'cereals'].includes(category)) {
          return 'gram'
        }

        if (category === 'dairy' && product.name.toLowerCase().includes('milk')) {
          return 'ml'
        }

        if (category === 'beverages') {
          return 'piece'
        }

        if (product.name.toLowerCase().includes('oil')) {
          return 'ml'
        }

        // –ü–æ –µ–¥–∏–Ω–∏—Ü–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (unit) {
          if (['kg', 'gram'].includes(unit)) return 'gram'
          if (['liter', 'ml'].includes(unit)) return 'ml'
          if (['piece', 'pack'].includes(unit)) return 'piece'
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞–º–º—ã
        return 'gram'
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
      const calculateBaseCost = (): number => {
        const baseUnit = getBaseUnit()
        const oldCostPerUnit = (product as any).currentCostPerUnit || product.costPerUnit || 0
        const oldUnit = (product as any).unit

        // –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ –±–∞–∑–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (
          (baseUnit === 'gram' && oldUnit === 'gram') ||
          (baseUnit === 'ml' && oldUnit === 'ml') ||
          (baseUnit === 'piece' && oldUnit === 'piece')
        ) {
          return oldCostPerUnit
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤ –±–∞–∑–æ–≤—ã–µ
        if (baseUnit === 'gram' && oldUnit === 'kg') {
          return oldCostPerUnit / 1000 // IDR/–∫–≥ -> IDR/–≥
        }

        if (baseUnit === 'ml' && oldUnit === 'liter') {
          return oldCostPerUnit / 1000 // IDR/–ª -> IDR/–º–ª
        }

        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        DebugUtils.warn(MODULE_NAME, `Cannot determine base cost for product ${product.name}`, {
          baseUnit,
          oldUnit,
          oldCostPerUnit
        })

        return oldCostPerUnit
      }

      const baseUnit = getBaseUnit()
      const baseCostPerUnit = calculateBaseCost()

      DebugUtils.info(MODULE_NAME, `‚úÖ Migrated product ${product.name}`, {
        baseUnit,
        baseCostPerUnit,
        oldUnit: (product as any).unit,
        oldCostPerUnit: product.costPerUnit
      })

      return {
        id: product.id,
        name: product.name,
        nameEn: (product as any).nameEn || product.name,
        baseUnit,
        baseCostPerUnit,
        category: product.category,
        isActive: product.isActive,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        unit: (product as any).unit,
        costPerUnit: product.costPerUnit
      }
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è Recipe Store
     */
    getProductsForRecipes(): ProductForRecipe[] {
      return this.products
        .filter(product => product.isActive)
        .map(product => this.getProductForRecipe(product.id))
        .filter((product): product is ProductForRecipe => product !== null)
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async notifyPriceChange(productId: string, newPrice: number): Promise<void> {
      DebugUtils.info(MODULE_NAME, `üí∞ Price changed for product ${productId}: ${newPrice}`)

      const product = this.getProductById(productId)
      if (!product) {
        DebugUtils.error(MODULE_NAME, `Product not found for price change: ${productId}`)
        return
      }

      // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£ –Ω–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      await this.updateProduct({
        id: productId,
        baseCostPerUnit: newPrice // –¶–µ–Ω–∞ —É–∂–µ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
      })

      // ‚úÖ –£–ü–†–û–©–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–º–µ—Å—Ç–æ callback
      DebugUtils.info(MODULE_NAME, 'Product price updated - recipes may need recalculation', {
        productId,
        productName: product.name,
        newBaseCostPerUnit: newPrice,
        baseUnit: product.baseUnit
      })

      // –í dev —Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
      if (import.meta.env.DEV) {
        console.log(`üîÑ Recipe costs may need recalculation for product: ${product.name}`)
      }
    },

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    updateProductUsage(productId: string, usageData: any): void {
      DebugUtils.debug(MODULE_NAME, `üìä Updating usage for product ${productId}`, {
        preparations: usageData.usedInPreparations?.length || 0,
        recipes: usageData.usedInRecipes?.length || 0
      })

      const product = this.getProductById(productId)
      if (product) {
        const prepCount = usageData.usedInPreparations?.length || 0
        const recipeCount = usageData.usedInRecipes?.length || 0
        DebugUtils.info(
          MODULE_NAME,
          `Product ${product.name} used in ${prepCount} preparations and ${recipeCount} recipes`
        )
      }
    },

    // =============================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =============================================

    getProductById(id: string): Product | null {
      return this.products.find(product => product.id === id) || null
    },

    updateFilters(filters: Partial<typeof this.filters>): void {
      console.log('üè¨ Store: updating filters', filters) // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
      console.log('üè¨ Store: old filters', { ...this.filters }) // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
      this.filters = { ...this.filters, ...filters }
      console.log('üè¨ Store: new filters', { ...this.filters }) // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
      DebugUtils.debug(MODULE_NAME, 'Filters updated', { filters: this.filters })
    },

    resetFilters(): void {
      this.filters = {
        category: 'all',
        isActive: 'all',
        canBeSold: 'all',
        search: '',
        department: 'all',
        needsReorder: false,
        urgencyLevel: 'all'
      }
      DebugUtils.debug(MODULE_NAME, 'Filters reset')
    },

    setSelectedProduct(product: Product | null): void {
      this.selectedProduct = product
      DebugUtils.debug(MODULE_NAME, 'Selected product changed', { id: product?.id })
    },

    clearError(): void {
      this.error = null
    },

    // =============================================
    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–ê–ö–û–í–û–ö
    // =============================================

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async addPackageOption(data: CreatePackageOptionDto): Promise<PackageOption> {
      try {
        this.loading = true
        this.error = null

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        const product = this.getProductById(data.productId)
        if (!product) {
          throw new Error('Product not found')
        }

        const now = new Date().toISOString()
        const newPackage: PackageOption = {
          id: `pkg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          ...data,
          isActive: true,
          createdAt: now,
          updatedAt: now
        }

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.addPackageOption(newPackage)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫—É –∫ –ø—Ä–æ–¥—É–∫—Ç—É
        const productIndex = this.products.findIndex(p => p.id === data.productId)
        if (productIndex !== -1) {
          this.products[productIndex].packageOptions.push(newPackage)
          this.products[productIndex].updatedAt = now
        }

        DebugUtils.info(MODULE_NAME, 'Package option created', {
          packageId: newPackage.id,
          productId: data.productId
        })

        return newPackage
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error creating package option', { error, data })
        this.error = 'Failed to create package option'
        throw error
      } finally {
        this.loading = false
      }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É
     */
    async updatePackageOption(data: UpdatePackageOptionDto): Promise<void> {
      try {
        this.loading = true
        this.error = null

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.updatePackageOption(data)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫—É –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
        const product = this.products.find(p => p.packageOptions.some(pkg => pkg.id === data.id))

        if (product) {
          const packageIndex = product.packageOptions.findIndex(pkg => pkg.id === data.id)
          if (packageIndex !== -1) {
            product.packageOptions[packageIndex] = {
              ...product.packageOptions[packageIndex],
              ...data,
              updatedAt: new Date().toISOString()
            }
            product.updatedAt = new Date().toISOString()
          }
        }

        DebugUtils.info(MODULE_NAME, 'Package option updated', { packageId: data.id })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error updating package option', { error, data })
        this.error = 'Failed to update package option'
        throw error
      } finally {
        this.loading = false
      }
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É
     */
    async deletePackageOption(productId: string, packageId: string): Promise<void> {
      try {
        this.loading = true
        this.error = null

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.deletePackageOption(packageId)
        }

        // –£–¥–∞–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫—É –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
        const product = this.products.find(p => p.id === productId)
        if (product) {
          product.packageOptions = product.packageOptions.filter(pkg => pkg.id !== packageId)

          // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –±—ã–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
          if (product.recommendedPackageId === packageId) {
            product.recommendedPackageId = product.packageOptions[0]?.id
          }

          product.updatedAt = new Date().toISOString()
        }

        DebugUtils.info(MODULE_NAME, 'Package option deleted', { packageId, productId })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error deleting package option', { error, packageId })
        this.error = 'Failed to delete package option'
        throw error
      } finally {
        this.loading = false
      }
    },

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —É–ø–∞–∫–æ–≤–∫—É
     */
    async setRecommendedPackage(productId: string, packageId: string): Promise<void> {
      try {
        const product = this.getProductById(productId)
        if (!product) {
          throw new Error('Product not found')
        }

        const packageExists = product.packageOptions.some(pkg => pkg.id === packageId)
        if (!packageExists) {
          throw new Error('Package option not found')
        }

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.setRecommendedPackage(productId, packageId)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —É–ø–∞–∫–æ–≤–∫—É
        const productIndex = this.products.findIndex(p => p.id === productId)
        if (productIndex !== -1) {
          this.products[productIndex].recommendedPackageId = packageId
          this.products[productIndex].updatedAt = new Date().toISOString()
        }

        DebugUtils.info(MODULE_NAME, 'Recommended package set', { productId, packageId })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error setting recommended package', { error })
        throw error
      }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —É–ø–∞–∫–æ–≤–∫—É
     */
    getRecommendedPackage(productId: string): PackageOption | null {
      const product = this.getProductById(productId)
      if (!product || !product.recommendedPackageId) {
        return product?.packageOptions[0] || null
      }

      return product.packageOptions.find(pkg => pkg.id === product.recommendedPackageId) || null
    },

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
     */
    calculatePackageQuantity(
      productId: string,
      baseQuantity: number,
      packageId?: string
    ): {
      packageOption: PackageOption
      exactPackages: number // 2.5 —É–ø–∞–∫–æ–≤–æ–∫
      suggestedPackages: number // 3 —É–ø–∞–∫–æ–≤–∫–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ)
      actualBaseQuantity: number // 3000–≥ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
      difference: number // +500–≥ (—Ä–∞–∑–Ω–∏—Ü–∞ —Å —Ç—Ä–µ–±—É–µ–º—ã–º)
    } {
      const product = this.getProductById(productId)
      if (!product) {
        throw new Error('Product not found')
      }

      let packageOption: PackageOption
      if (packageId) {
        packageOption =
          product.packageOptions.find(pkg => pkg.id === packageId) || product.packageOptions[0]
      } else {
        packageOption = this.getRecommendedPackage(productId) || product.packageOptions[0]
      }

      if (!packageOption) {
        throw new Error('No package options available')
      }

      const exactPackages = baseQuantity / packageOption.packageSize
      const suggestedPackages = Math.ceil(exactPackages)
      const actualBaseQuantity = suggestedPackages * packageOption.packageSize
      const difference = actualBaseQuantity - baseQuantity

      return {
        packageOption,
        exactPackages: Math.round(exactPackages * 100) / 100,
        suggestedPackages,
        actualBaseQuantity,
        difference
      }
    },

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–µ–º–∫–∏
     */
    async updatePackageCostFromReceipt(packageId: string, actualPrice: number): Promise<void> {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç —Å –¥–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–æ–π
        const product = this.products.find(p => p.packageOptions.some(pkg => pkg.id === packageId))

        if (!product) {
          throw new Error('Package not found')
        }

        const packageOption = product.packageOptions.find(pkg => pkg.id === packageId)
        if (!packageOption) {
          throw new Error('Package option not found')
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        const newBaseCostPerUnit = actualPrice / packageOption.packageSize

        // –û–±–Ω–æ–≤–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫—É
        await this.updatePackageOption({
          id: packageId,
          packagePrice: actualPrice,
          baseCostPerUnit: newBaseCostPerUnit
        })

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç—É —É–ø–∞–∫–æ–≤–∫—É –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é
        await this.setRecommendedPackage(product.id, packageId)

        DebugUtils.info(MODULE_NAME, 'Package cost updated from receipt', {
          packageId,
          actualPrice,
          newBaseCostPerUnit,
          productId: product.id
        })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error updating package cost from receipt', { error })
        throw error
      }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É –ø–æ ID
     */
    getPackageById(packageId: string): PackageOption | null {
      for (const product of this.products) {
        const packageOption = product.packageOptions.find(pkg => pkg.id === packageId)
        if (packageOption) return packageOption
      }
      return null
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    getActivePackages(productId: string): PackageOption[] {
      const product = this.getProductById(productId)
      if (!product) return []

      return product.packageOptions.filter(pkg => pkg.isActive)
    },

    // =============================================
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï DEBUG –§–£–ù–ö–¶–ò–ò
    // =============================================

    setupDevDebugFunctions(): void {
      if (!import.meta.env.DEV) return

      window.__PRODUCT_STORE_DEBUG__ = () => {
        DebugUtils.debug(MODULE_NAME, '=== ENHANCED PRODUCT STORE DEBUG ===')
        DebugUtils.debug(MODULE_NAME, 'Products:', this.products.length)

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const withBaseUnits = this.products.filter(p => (p as any).baseUnit).length
        const withoutBaseUnits = this.products.length - withBaseUnits

        DebugUtils.debug(MODULE_NAME, 'Products with base units:', withBaseUnits)
        DebugUtils.debug(
          MODULE_NAME,
          'Products without base units (need migration):',
          withoutBaseUnits
        )

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        const sampleProduct = this.products[0]
        if (sampleProduct) {
          DebugUtils.debug(
            MODULE_NAME,
            'Sample product for Recipe Store:',
            this.getProductForRecipe(sampleProduct.id)
          )
        }

        return this
      }

      window.__TEST_COST_CALCULATION__ = () => {
        DebugUtils.debug(MODULE_NAME, 'üß™ Testing cost calculation with current products...')

        DebugUtils.debug(MODULE_NAME, 'üìù RECIPE: Salad Dressing')
        DebugUtils.debug(MODULE_NAME, 'Ingredients:')

        const oliveOil = this.getProductForRecipe('prod-olive-oil')
        const garlic = this.getProductForRecipe('prod-garlic')
        const salt = this.getProductForRecipe('prod-salt')
        const pepper = this.getProductForRecipe('prod-black-pepper')

        if (oliveOil && garlic && salt && pepper) {
          // –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ: 120 –º–ª
          const oilCost = 120 * oliveOil.baseCostPerUnit
          DebugUtils.debug(
            MODULE_NAME,
            `‚Ä¢ Olive Oil: 120 –º–ª √ó ${oliveOil.baseCostPerUnit} IDR/–º–ª = ${oilCost} IDR`
          )

          // –ß–µ—Å–Ω–æ–∫: 10 –≥
          const garlicCost = 10 * garlic.baseCostPerUnit
          DebugUtils.debug(
            MODULE_NAME,
            `‚Ä¢ Garlic: 10 –≥ √ó ${garlic.baseCostPerUnit} IDR/–≥ = ${garlicCost} IDR`
          )

          // –°–æ–ª—å: 3 –≥
          const saltCost = 3 * salt.baseCostPerUnit
          DebugUtils.debug(
            MODULE_NAME,
            `‚Ä¢ Salt: 3 –≥ √ó ${salt.baseCostPerUnit} IDR/–≥ = ${saltCost} IDR`
          )

          // –ü–µ—Ä–µ—Ü: 1 –≥
          const pepperCost = 1 * pepper.baseCostPerUnit
          DebugUtils.debug(
            MODULE_NAME,
            `‚Ä¢ Black Pepper: 1 –≥ √ó ${pepper.baseCostPerUnit} IDR/–≥ = ${pepperCost} IDR`
          )

          const totalCost = oilCost + garlicCost + saltCost + pepperCost
          const costPerMl = totalCost / 130 // 130 –º–ª –≤—ã—Ö–æ–¥

          DebugUtils.debug(MODULE_NAME, `üìä TOTAL: ${totalCost} IDR`)
          DebugUtils.debug(MODULE_NAME, `üí∞ Cost per ml: ${costPerMl.toFixed(2)} IDR/–º–ª`)
          DebugUtils.debug(MODULE_NAME, '‚úÖ This should match the Recipe Store calculation!')
        } else {
          DebugUtils.debug(MODULE_NAME, '‚ùå Some products not found for test calculation')
        }

        return {
          oliveOil,
          garlic,
          salt,
          pepper
        }
      }

      DebugUtils.debug(MODULE_NAME, 'üîç Enhanced Product Store loaded! Try:')
      DebugUtils.debug(MODULE_NAME, '  ‚Ä¢ window.__PRODUCT_STORE_DEBUG__()')
      DebugUtils.debug(MODULE_NAME, '  ‚Ä¢ window.__TEST_COST_CALCULATION__()')
    }
  }
})
