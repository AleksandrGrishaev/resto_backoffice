// src/stores/productsStore/productsStore.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

import { defineStore } from 'pinia'
import type { ProductsState, Product, CreateProductData, UpdateProductData } from './types'
import { DebugUtils } from '@/utils'
import type { ProductForRecipe } from '@/stores/recipes/types'

const MODULE_NAME = 'ProductsStore'

export const useProductsStore = defineStore('products', {
  state: (): ProductsState => ({
    products: [],
    loading: false,
    error: null,
    selectedProduct: null,
    useMockMode: false,
    filters: {
      category: 'all',
      isActive: 'all',
      canBeSold: 'all',
      search: '',
      needsReorder: false,
      urgencyLevel: 'all'
    }
  }),

  getters: {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–µ—Ç—Ç–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    filteredProducts: (state): Product[] => {
      let filtered = [...state.products]

      if (state.filters.category !== 'all') {
        filtered = filtered.filter(product => product.category === state.filters.category)
      }

      if (state.filters.isActive !== 'all') {
        filtered = filtered.filter(product => product.isActive === state.filters.isActive)
      }

      if (state.filters.search) {
        const searchTerm = state.filters.search.toLowerCase()
        filtered = filtered.filter(
          product =>
            product.name.toLowerCase().includes(searchTerm) ||
            (product as any).nameEn?.toLowerCase().includes(searchTerm) ||
            product.description?.toLowerCase().includes(searchTerm)
        )
      }

      return filtered.sort((a, b) => a.name.localeCompare(b.name))
    },

    sellableProducts: (state): Product[] => {
      return state.products.filter(product => product.isActive && product.canBeSold)
    },

    rawMaterials: (state): Product[] => {
      return state.products.filter(product => product.isActive && !product.canBeSold)
    }
  },

  actions: {
    // =============================================
    // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    // =============================================

    async loadProducts(useMock = false): Promise<void> {
      try {
        this.loading = true
        this.error = null
        this.useMockMode = useMock

        DebugUtils.info(MODULE_NAME, 'üõçÔ∏è Loading products', { useMock })

        if (useMock) {
          // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
          const { mockDataCoordinator } = await import('@/stores/shared')
          const data = mockDataCoordinator.getProductsStoreData()

          this.products = data.products

          DebugUtils.info(MODULE_NAME, '‚úÖ Products loaded from coordinator', {
            products: this.products.length
          })
        } else {
          // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firebase (–ø–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
          const { productsService } = await import('./productsService')
          this.products = await productsService.getAll()
          DebugUtils.info(MODULE_NAME, '‚úÖ Products loaded from Firebase', {
            count: this.products.length
          })
        }

        if (import.meta.env.DEV) {
          this.setupDevDebugFunctions()
        }
      } catch (error) {
        DebugUtils.error(MODULE_NAME, '‚ùå Error loading products', { error })
        this.error = 'Failed to load products'
        throw error
      } finally {
        this.loading = false
      }
    },

    async createProduct(data: CreateProductData): Promise<Product> {
      try {
        this.loading = true
        this.error = null

        DebugUtils.info(MODULE_NAME, 'Creating product', { data, mockMode: this.useMockMode })

        let newProduct: Product

        if (this.useMockMode) {
          // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
          const now = new Date().toISOString()
          newProduct = {
            id: `prod-${Date.now()}`,
            ...data,
            isActive: data.isActive ?? true,
            canBeSold: data.canBeSold ?? false,
            createdAt: now,
            updatedAt: now
          } as Product
        } else {
          const { productsService } = await import('./productsService')
          newProduct = await productsService.createProduct(data)
        }

        this.products.push(newProduct)
        DebugUtils.info(MODULE_NAME, 'Product created', { id: newProduct.id })
        return newProduct
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error creating product', { error, data })
        this.error = 'Failed to create product'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateProduct(data: UpdateProductData): Promise<void> {
      try {
        this.loading = true
        this.error = null

        DebugUtils.info(MODULE_NAME, 'Updating product', { data, mockMode: this.useMockMode })

        if (!this.useMockMode) {
          const { productsService } = await import('./productsService')
          await productsService.updateProduct(data)
        }

        const index = this.products.findIndex(p => p.id === data.id)
        if (index !== -1) {
          this.products[index] = {
            ...this.products[index],
            ...data,
            updatedAt: new Date().toISOString()
          }
        }

        DebugUtils.info(MODULE_NAME, 'Product updated', { id: data.id })
      } catch (error) {
        DebugUtils.error(MODULE_NAME, 'Error updating product', { error, data })
        this.error = 'Failed to update product'
        throw error
      } finally {
        this.loading = false
      }
    },

    // =============================================
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
    // =============================================

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Recipe Store —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
     */
    getProductForRecipe(productId: string): ProductForRecipe | null {
      const product = this.getProductById(productId)

      if (!product) {
        DebugUtils.warn(MODULE_NAME, `Product not found: ${productId}`)
        return null
      }

      // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –ï—Å—Ç—å –ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏?
      const hasBaseUnits =
        (product as any).baseUnit && (product as any).baseCostPerUnit !== undefined

      if (hasBaseUnits) {
        // ‚úÖ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        return {
          id: product.id,
          name: product.name,
          nameEn: (product as any).nameEn || product.name,
          baseUnit: (product as any).baseUnit,
          baseCostPerUnit: (product as any).baseCostPerUnit,
          category: product.category,
          isActive: product.isActive
        }
      } else {
        // ‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –Ω–æ–≤—É—é
        DebugUtils.warn(MODULE_NAME, `Product ${productId} uses old structure, migrating...`)

        return this.migrateOldProductToNew(product)
      }
    },

    /**
     * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –Ω–æ–≤—ã–π
     */
    migrateOldProductToNew(product: Product): ProductForRecipe {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const getBaseUnit = (): 'gram' | 'ml' | 'piece' => {
        const unit = (product as any).unit
        const category = product.category.toLowerCase()

        // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (['meat', 'vegetables', 'spices', 'cereals'].includes(category)) {
          return 'gram'
        }

        if (category === 'dairy' && product.name.toLowerCase().includes('milk')) {
          return 'ml'
        }

        if (category === 'beverages') {
          return 'piece'
        }

        if (product.name.toLowerCase().includes('oil')) {
          return 'ml'
        }

        // –ü–æ –µ–¥–∏–Ω–∏—Ü–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (unit) {
          if (['kg', 'gram'].includes(unit)) return 'gram'
          if (['liter', 'ml'].includes(unit)) return 'ml'
          if (['piece', 'pack'].includes(unit)) return 'piece'
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞–º–º—ã
        return 'gram'
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
      const calculateBaseCost = (): number => {
        const baseUnit = getBaseUnit()
        const oldCostPerUnit = (product as any).currentCostPerUnit || product.costPerUnit || 0
        const oldUnit = (product as any).unit

        // –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ –±–∞–∑–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (
          (baseUnit === 'gram' && oldUnit === 'gram') ||
          (baseUnit === 'ml' && oldUnit === 'ml') ||
          (baseUnit === 'piece' && oldUnit === 'piece')
        ) {
          return oldCostPerUnit
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤ –±–∞–∑–æ–≤—ã–µ
        if (baseUnit === 'gram' && oldUnit === 'kg') {
          return oldCostPerUnit / 1000 // IDR/–∫–≥ -> IDR/–≥
        }

        if (baseUnit === 'ml' && oldUnit === 'liter') {
          return oldCostPerUnit / 1000 // IDR/–ª -> IDR/–º–ª
        }

        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        DebugUtils.warn(MODULE_NAME, `Cannot determine base cost for product ${product.name}`, {
          baseUnit,
          oldUnit,
          oldCostPerUnit
        })

        return oldCostPerUnit
      }

      const baseUnit = getBaseUnit()
      const baseCostPerUnit = calculateBaseCost()

      DebugUtils.info(MODULE_NAME, `‚úÖ Migrated product ${product.name}`, {
        baseUnit,
        baseCostPerUnit,
        oldUnit: (product as any).unit,
        oldCostPerUnit: product.costPerUnit
      })

      return {
        id: product.id,
        name: product.name,
        nameEn: (product as any).nameEn || product.name,
        baseUnit,
        baseCostPerUnit,
        category: product.category,
        isActive: product.isActive,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        unit: (product as any).unit,
        costPerUnit: product.costPerUnit
      }
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è Recipe Store
     */
    getProductsForRecipes(): ProductForRecipe[] {
      return this.products
        .filter(product => product.isActive)
        .map(product => this.getProductForRecipe(product.id))
        .filter((product): product is ProductForRecipe => product !== null)
    },

    /**
     * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    async notifyPriceChange(productId: string, newPrice: number): Promise<void> {
      DebugUtils.info(MODULE_NAME, `üí∞ Price changed for product ${productId}: ${newPrice}`)

      const product = this.getProductById(productId)
      if (!product) {
        DebugUtils.error(MODULE_NAME, `Product not found for price change: ${productId}`)
        return
      }

      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞
      const hasBaseUnits =
        (product as any).baseUnit && (product as any).baseCostPerUnit !== undefined

      if (hasBaseUnits) {
        // ‚úÖ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –û–±–Ω–æ–≤–ª—è–µ–º baseCostPerUnit
        await this.updateProduct({
          id: productId,
          baseCostPerUnit: newPrice, // –¶–µ–Ω–∞ —É–∂–µ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
          purchaseCost: newPrice * ((product as any).purchaseToBaseRatio || 1) // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏
        })
      } else {
        // ‚úÖ –°–¢–ê–†–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –û–±–Ω–æ–≤–ª—è–µ–º costPerUnit
        await this.updateProduct({
          id: productId,
          costPerUnit: newPrice,
          currentCostPerUnit: newPrice
        })
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º Recipe Store –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      if (window.__RECIPE_STORE_PRICE_CHANGE_CALLBACK__) {
        await window.__RECIPE_STORE_PRICE_CHANGE_CALLBACK__(productId)
      }
    },

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    updateProductUsage(productId: string, usageData: any): void {
      DebugUtils.debug(MODULE_NAME, `üìä Updating usage for product ${productId}`, {
        preparations: usageData.usedInPreparations?.length || 0,
        recipes: usageData.usedInRecipes?.length || 0
      })

      const product = this.getProductById(productId)
      if (product) {
        const prepCount = usageData.usedInPreparations?.length || 0
        const recipeCount = usageData.usedInRecipes?.length || 0
        DebugUtils.info(
          MODULE_NAME,
          `Product ${product.name} used in ${prepCount} preparations and ${recipeCount} recipes`
        )
      }
    },

    // =============================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =============================================

    getProductById(id: string): Product | null {
      return this.products.find(product => product.id === id) || null
    },

    updateFilters(filters: Partial<typeof this.filters>): void {
      this.filters = { ...this.filters, ...filters }
      DebugUtils.debug(MODULE_NAME, 'Filters updated', { filters: this.filters })
    },

    resetFilters(): void {
      this.filters = {
        category: 'all',
        isActive: 'all',
        canBeSold: 'all',
        search: '',
        needsReorder: false,
        urgencyLevel: 'all'
      }
      DebugUtils.debug(MODULE_NAME, 'Filters reset')
    },

    setSelectedProduct(product: Product | null): void {
      this.selectedProduct = product
      DebugUtils.debug(MODULE_NAME, 'Selected product changed', { id: product?.id })
    },

    clearError(): void {
      this.error = null
    },

    // =============================================
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï DEBUG –§–£–ù–ö–¶–ò–ò
    // =============================================

    setupDevDebugFunctions(): void {
      if (!import.meta.env.DEV) return

      window.__PRODUCT_STORE_DEBUG__ = () => {
        console.log('=== ENHANCED PRODUCT STORE DEBUG ===')
        console.log('Products:', this.products.length)

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const withBaseUnits = this.products.filter(p => (p as any).baseUnit).length
        const withoutBaseUnits = this.products.length - withBaseUnits

        console.log('Products with base units:', withBaseUnits)
        console.log('Products without base units (need migration):', withoutBaseUnits)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        const sampleProduct = this.products[0]
        if (sampleProduct) {
          console.log('\nSample product for Recipe Store:')
          console.log(this.getProductForRecipe(sampleProduct.id))
        }

        return this
      }

      window.__TEST_COST_CALCULATION__ = () => {
        console.log('üß™ Testing cost calculation with current products...')

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è —Å–∞–ª–∞—Ç–Ω–æ–π –∑–∞–ø—Ä–∞–≤–∫–∏
        console.log('\nüìù RECIPE: Salad Dressing')
        console.log('Ingredients:')

        const oliveOil = this.getProductForRecipe('prod-olive-oil')
        const garlic = this.getProductForRecipe('prod-garlic')
        const salt = this.getProductForRecipe('prod-salt')
        const pepper = this.getProductForRecipe('prod-black-pepper')

        if (oliveOil && garlic && salt && pepper) {
          // –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ: 120 –º–ª
          const oilCost = 120 * oliveOil.baseCostPerUnit
          console.log(`‚Ä¢ Olive Oil: 120 –º–ª √ó ${oliveOil.baseCostPerUnit} IDR/–º–ª = ${oilCost} IDR`)

          // –ß–µ—Å–Ω–æ–∫: 10 –≥
          const garlicCost = 10 * garlic.baseCostPerUnit
          console.log(`‚Ä¢ Garlic: 10 –≥ √ó ${garlic.baseCostPerUnit} IDR/–≥ = ${garlicCost} IDR`)

          // –°–æ–ª—å: 3 –≥
          const saltCost = 3 * salt.baseCostPerUnit
          console.log(`‚Ä¢ Salt: 3 –≥ √ó ${salt.baseCostPerUnit} IDR/–≥ = ${saltCost} IDR`)

          // –ü–µ—Ä–µ—Ü: 1 –≥
          const pepperCost = 1 * pepper.baseCostPerUnit
          console.log(`‚Ä¢ Black Pepper: 1 –≥ √ó ${pepper.baseCostPerUnit} IDR/–≥ = ${pepperCost} IDR`)

          const totalCost = oilCost + garlicCost + saltCost + pepperCost
          const costPerMl = totalCost / 130 // 130 –º–ª –≤—ã—Ö–æ–¥

          console.log(`\nüìä TOTAL: ${totalCost} IDR`)
          console.log(`üí∞ Cost per ml: ${costPerMl.toFixed(2)} IDR/–º–ª`)
          console.log('\n‚úÖ This should match the Recipe Store calculation!')
        } else {
          console.log('‚ùå Some products not found for test calculation')
        }

        return {
          oliveOil,
          garlic,
          salt,
          pepper
        }
      }

      setTimeout(() => {
        console.log('üîç Enhanced Product Store loaded! Try:')
        console.log('  ‚Ä¢ window.__PRODUCT_STORE_DEBUG__()')
        console.log('  ‚Ä¢ window.__TEST_COST_CALCULATION__()')
      }, 100)
    }
  }
})
