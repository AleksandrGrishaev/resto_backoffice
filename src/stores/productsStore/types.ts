// src/stores/productsStore/types.ts
import type { BaseEntity } from '@/types/common'
import type { MeasurementUnit } from '@/types/measurementUnits'

export type ProductCategory =
  | 'meat'
  | 'vegetables'
  | 'fruits'
  | 'dairy'
  | 'cereals'
  | 'spices'
  | 'seafood'
  | 'beverages'
  | 'other'

export interface Product extends BaseEntity {
  name: string // "–ú—É–∫–∞", "–ü–∏–≤–æ Bintang", "–ì–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç"
  description?: string
  category: ProductCategory
  unit: MeasurementUnit
  costPerUnit: number // –¢–û–õ–¨–ö–û —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—É–ø–∫–∏
  yieldPercentage: number // –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (—É—á–µ—Ç –æ—Ç—Ö–æ–¥–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
  isActive: boolean

  // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
  canBeSold: boolean // –º–æ–∂–µ—Ç –ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é (–ø–∏–≤–æ, –Ω–∞–ø–∏—Ç–∫–∏, –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã)

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
  storageConditions?: string
  shelfLife?: number // —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö
  minStock?: number // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
}

export interface ProductsState {
  products: Product[]
  loading: boolean
  error: string | null
  selectedProduct: Product | null
  useMockMode: boolean // —Ñ–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–∫–∞–º–∏
  filters: {
    category: ProductCategory | 'all'
    isActive: boolean | 'all'
    search: string
  }
}

export interface CreateProductData {
  name: string
  category: ProductCategory
  unit: MeasurementUnit
  costPerUnit: number // –¢–û–õ–¨–ö–û —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—É–ø–∫–∏
  yieldPercentage: number
  description?: string
  isActive?: boolean
  canBeSold?: boolean // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–∑–¥–∞–Ω–∏–µ
  storageConditions?: string
  shelfLife?: number
  minStock?: number
}

export interface UpdateProductData extends Partial<CreateProductData> {
  id: string
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const PRODUCT_CATEGORIES: Record<ProductCategory, string> = {
  meat: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
  vegetables: '–û–≤–æ—â–∏',
  fruits: '–§—Ä—É–∫—Ç—ã',
  dairy: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  cereals: '–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏',
  spices: '–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã',
  seafood: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
  beverages: '–ù–∞–ø–∏—Ç–∫–∏',
  other: '–ü—Ä–æ—á–µ–µ'
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞)
import { PRODUCT_UNITS, getUnitName } from '@/types/measurementUnits'

export const MEASUREMENT_UNITS_FOR_PRODUCTS = PRODUCT_UNITS.reduce(
  (acc, unit) => {
    acc[unit] = getUnitName(unit)
    return acc
  },
  {} as Record<MeasurementUnit, string>
)

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
export const MEASUREMENT_UNITS = MEASUREMENT_UNITS_FOR_PRODUCTS

// src/stores/productsStore/types.ts - –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Stock Recommendations

// ===== EXISTING TYPES (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º) =====
// Product, ProductCategory, ProductsState, etc.

// ===== NEW TYPES FOR STOCK RECOMMENDATIONS =====

// üÜï MAIN FEATURE: Stock recommendations
export interface StockRecommendation extends BaseEntity {
  productId: string
  currentStock: number // From Storage Store
  recommendedMinStock: number // Calculated minimum
  recommendedMaxStock: number // Calculated maximum
  recommendedOrderQuantity: number // Optimal order amount
  daysUntilReorder: number // When to reorder
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical'
  factors: {
    averageDailyUsage: number
    leadTimeDays: number
    safetyDays: number
    seasonalFactor?: number
  }
  calculatedAt: string
  isActive: boolean
}

// Usage tracking - where product is used
export interface ProductUsage extends BaseEntity {
  productId: string
  usedInRecipes: Array<{
    recipeId: string
    recipeName: string
    quantityPerPortion: number
    isActive: boolean
  }>
  usedInPreparations: Array<{
    preparationId: string
    preparationName: string
    quantityPerOutput: number
    isActive: boolean
  }>
  directMenuItems?: Array<{
    menuItemId: string
    menuItemName: string
    variantId: string
    variantName: string
    quantityPerItem: number
    isActive: boolean
  }>
  lastUpdated: string
}

// Consumption analytics
export interface ProductConsumption extends BaseEntity {
  productId: string
  dailyAverageUsage: number
  weeklyAverageUsage: number
  monthlyAverageUsage: number
  trend: 'increasing' | 'decreasing' | 'stable'
  calculatedAt: string
  basedOnDays: number
}

// Price history tracking
export interface ProductPriceHistory extends BaseEntity {
  productId: string
  pricePerUnit: number
  effectiveDate: string
  sourceType: 'purchase_order' | 'receipt' | 'manual_update'
  sourceId?: string
  supplierId?: string
  notes?: string
}

// ===== ENHANCED PRODUCT INTERFACE =====

// üÜï Enhanced Product Interface (extends existing)
export interface EnhancedProduct extends Product {
  // English support
  nameEn: string
  descriptionEn?: string

  // üÜï ENHANCED: Smart stock management
  currentCostPerUnit: number // Latest price from supplier receipts
  recommendedOrderQuantity?: number // Calculated optimal order amount

  // Supplier basics
  primarySupplierId?: string
  leadTimeDays?: number

  // Metadata
  tags?: string[]
}

// ===== ENHANCED STATE =====

export interface EnhancedProductsState extends ProductsState {
  // üÜï New data collections
  stockRecommendations: StockRecommendation[]
  usageData: ProductUsage[]
  consumptionData: ProductConsumption[]
  priceHistory: ProductPriceHistory[]

  // üÜï Enhanced loading states
  loading: {
    products: boolean
    recommendations: boolean
    usage: boolean
    consumption: boolean
    priceHistory: boolean
  }

  // üÜï Enhanced filters
  filters: {
    category: ProductCategory | 'all'
    isActive: boolean | 'all'
    canBeSold: boolean | 'all' // Filter by direct sale capability
    search: string
    needsReorder: boolean // Show products needing reorder
    urgencyLevel: StockRecommendation['urgencyLevel'] | 'all'
  }
}

// ===== CROSS-STORE INTEGRATION TYPES =====

// For Supplier Store integration
export interface ProductForSupplier {
  id: string
  name: string
  nameEn: string
  currentCostPerUnit: number
  recommendedOrderQuantity: number
  urgencyLevel: StockRecommendation['urgencyLevel']
  primarySupplierId?: string
  leadTimeDays?: number
}

// For Menu Store integration
export interface ProductForMenu {
  id: string
  name: string
  nameEn: string
  canBeSold: boolean
  currentCostPerUnit: number
  unit: MeasurementUnit
}

// For Storage Store integration
export interface ProductStockInfo {
  productId: string
  currentStock: number
  unit: MeasurementUnit
  lastUpdated: string
}

// ===== CALCULATION PARAMETERS =====

export interface StockCalculationParams {
  safetyDays: number // Default: 3
  maxOrderDays: number // Default: 14
  seasonalFactors?: Record<string, number>
  volatilityThreshold: number // Default: 0.3
}

// ===== API INTERFACES =====

export interface CreateStockRecommendationData {
  productId: string
  currentStock: number
  averageDailyUsage: number
  leadTimeDays: number
  safetyDays?: number
}

export interface UpdateStockRecommendationData extends Partial<CreateStockRecommendationData> {
  id: string
}

// Helper type for recommendation calculations
export interface RecommendationCalculationInput {
  product: Product
  currentStock: number
  consumption: ProductConsumption
  usage: ProductUsage
  calculationParams: StockCalculationParams
}
