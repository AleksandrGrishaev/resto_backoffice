// src/stores/productsStore/types.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å PackageOption

import type { BaseEntity } from '@/types/common'
import type { MeasurementUnit } from '@/types/measurementUnits'

// ‚úÖ NEW: Department Type
export type Department = 'kitchen' | 'bar'

export type ProductCategory =
  | 'meat'
  | 'vegetables'
  | 'fruits'
  | 'dairy'
  | 'cereals'
  | 'spices'
  | 'seafood'
  | 'beverages'
  | 'other'

export type BaseUnit = 'gram' | 'ml' | 'piece'

// ‚úÖ –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: PackageOption
export interface PackageOption {
  id: string
  productId: string

  // –û–ü–ò–°–ê–ù–ò–ï –£–ü–ê–ö–û–í–ö–ò
  packageName: string // "–ü–∞—á–∫–∞ 100–≥", "–ë—É—Ç—ã–ª–∫–∞ 1–ª", "–ö–æ—Ä–æ–±–∫–∞ 24—à—Ç"
  packageSize: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤ —É–ø–∞–∫–æ–≤–∫–µ
  packageUnit: MeasurementUnit // –ï–¥–∏–Ω–∏—Ü–∞ —É–ø–∞–∫–æ–≤–∫–∏ ('pack', 'bottle', 'box')
  brandName?: string // "Anchor", "Local Brand"

  // –¶–ï–ù–´ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
  packagePrice?: number // –¶–µ–Ω–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É (IDR)
  baseCostPerUnit: number // –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É (IDR)

  // –ú–ï–¢–ê–î–ê–ù–ù–´–ï
  isActive: boolean
  notes?: string // "–°–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è", "–¢–æ–ª—å–∫–æ –æ–ø—Ç–æ–º"
  createdAt: string
  updatedAt: string
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: Product –±–µ–∑ legacy –ø–æ–ª–µ–π
export interface Product extends BaseEntity {
  name: string
  description?: string
  category: ProductCategory
  yieldPercentage: number
  usedInDepartments: Department[] // ['kitchen'] | ['bar'] | ['kitchen', 'bar']

  isActive: boolean
  canBeSold: boolean

  // ‚úÖ –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø (–æ—Å—Ç–∞—é—Ç—Å—è)
  baseUnit: BaseUnit // 'gram' | 'ml' | 'piece'
  baseCostPerUnit: number // –¶–µ–Ω–∞ –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤

  // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø
  packageOptions: PackageOption[] // –í–∞—Ä–∏–∞–Ω—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏
  recommendedPackageId?: string // ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
  storageConditions?: string
  shelfLife?: number
  minStock?: number
  maxStock?: number
  nameEn?: string
  leadTimeDays?: number
  primarySupplierId?: string
  tags?: string[]
}

// ‚úÖ –ù–û–í–´–ï DTO –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏
export interface CreatePackageOptionDto {
  productId: string
  packageName: string
  packageSize: number
  packageUnit: MeasurementUnit
  brandName?: string
  packagePrice?: number
  baseCostPerUnit: number
  notes?: string
}

export interface UpdatePackageOptionDto {
  id: string
  packageName?: string
  packageSize?: number
  packageUnit?: MeasurementUnit
  brandName?: string
  packagePrice?: number
  baseCostPerUnit?: number
  isActive?: boolean
  notes?: string
}

// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô: ProductsState (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export interface ProductsState {
  products: Product[]
  loading: boolean
  error: string | null
  selectedProduct: Product | null
  useMockMode: boolean

  // üÜï ENHANCED: Extended filters
  filters: {
    category: ProductCategory | 'all'
    isActive: boolean | 'all'
    canBeSold: boolean | 'all'
    search: string
    department: Department | 'all'
    needsReorder: boolean
    urgencyLevel: 'low' | 'medium' | 'high' | 'critical' | 'all'
  }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: CreateProductData –±–µ–∑ legacy –ø–æ–ª–µ–π
export interface CreateProductData {
  name: string
  category: ProductCategory
  baseUnit: BaseUnit // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  baseCostPerUnit: number // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  yieldPercentage: number
  usedInDepartments: Department[] // REQUIRED

  description?: string
  isActive?: boolean
  canBeSold?: boolean
  storageConditions?: string
  shelfLife?: number
  minStock?: number
  nameEn?: string
  leadTimeDays?: number
  primarySupplierId?: string
  tags?: string[]

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞
}

export interface UpdateProductData extends Partial<CreateProductData> {
  id: string
}

export interface UpdateProductData extends Partial<CreateProductData> {
  id: string
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const PRODUCT_CATEGORIES: Record<ProductCategory, string> = {
  meat: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
  vegetables: '–û–≤–æ—â–∏',
  fruits: '–§—Ä—É–∫—Ç—ã',
  dairy: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  cereals: '–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏',
  spices: '–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã',
  seafood: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
  beverages: '–ù–∞–ø–∏—Ç–∫–∏',
  other: '–ü—Ä–æ—á–µ–µ'
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
import { PRODUCT_UNITS, getUnitName } from '@/types/measurementUnits'

export const MEASUREMENT_UNITS_FOR_PRODUCTS = PRODUCT_UNITS.reduce(
  (acc, unit) => {
    acc[unit] = getUnitName(unit)
    return acc
  },
  {} as Record<MeasurementUnit, string>
)

export const MEASUREMENT_UNITS = MEASUREMENT_UNITS_FOR_PRODUCTS

// ===== ENHANCED PRODUCT INTERFACE =====

export interface EnhancedProduct extends Product {
  nameEn: string
  descriptionEn?: string
  currentCostPerUnit: number
  recommendedOrderQuantity?: number
  primarySupplierId?: string
  leadTimeDays?: number
  tags?: string[]
}

// ===== STOCK RECOMMENDATIONS TYPES =====

export interface StockRecommendation extends BaseEntity {
  productId: string
  currentStock: number
  recommendedMinStock: number
  recommendedMaxStock: number
  recommendedOrderQuantity: number
  daysUntilReorder: number
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical'
  factors: {
    averageDailyUsage: number
    leadTimeDays: number
    safetyDays: number
    seasonalFactor?: number
  }
  calculatedAt: string
  isActive: boolean
}

export interface ProductUsage extends BaseEntity {
  productId: string
  usedInRecipes: Array<{
    recipeId: string
    recipeName: string
    quantityPerPortion: number
    isActive: boolean
  }>
  usedInPreparations: Array<{
    preparationId: string
    preparationName: string
    quantityPerOutput: number
    isActive: boolean
  }>
  directMenuItems?: Array<{
    menuItemId: string
    menuItemName: string
    variantId: string
    variantName: string
    quantityPerItem: number
    isActive: boolean
  }>
  lastUpdated: string
}

export interface ProductConsumption extends BaseEntity {
  productId: string
  dailyAverageUsage: number
  weeklyAverageUsage: number
  monthlyAverageUsage: number
  trend: 'increasing' | 'decreasing' | 'stable'
  calculatedAt: string
  basedOnDays: number
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: ProductPriceHistory —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
export interface ProductPriceHistory extends BaseEntity {
  productId: string
  pricePerUnit: number // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø: –¶–µ–Ω–∞ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
  basePricePerUnit?: number // IDR –∑–∞ –≥—Ä–∞–º–º/–º–ª/—à—Ç—É–∫—É

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–µ
  purchasePrice?: number // –¶–µ–Ω–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É
  purchaseUnit?: MeasurementUnit // –ï–¥–∏–Ω–∏—Ü–∞ –∑–∞–∫—É–ø–∫–∏
  purchaseQuantity?: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —É–ø–∞–∫–æ–≤–∫–µ

  effectiveDate: string
  sourceType: 'purchase_order' | 'receipt' | 'manual_update'
  sourceId?: string
  supplierId?: string
  notes?: string
}

// ===== CALCULATION PARAMETERS =====

export interface StockCalculationParams {
  safetyDays: number
  maxOrderDays: number
  seasonalFactors?: Record<string, number>
  volatilityThreshold: number
}

export interface CreateStockRecommendationData {
  productId: string
  currentStock: number
  averageDailyUsage: number
  leadTimeDays: number
  safetyDays?: number
}

export interface UpdateStockRecommendationData extends Partial<CreateStockRecommendationData> {
  id: string
}

export interface RecommendationCalculationInput {
  product: Product
  currentStock: number
  consumption: ProductConsumption
  usage: ProductUsage
  calculationParams: StockCalculationParams
}

// ===== CROSS-STORE INTEGRATION TYPES =====

export interface ProductForSupplier {
  id: string
  name: string
  nameEn: string
  currentCostPerUnit: number
  recommendedOrderQuantity: number
  urgencyLevel: StockRecommendation['urgencyLevel']
  primarySupplierId?: string
  leadTimeDays?: number
  baseUnit: BaseUnit
  recommendedPackage?: PackageOption
  packageOptions: PackageOption[]
}

export interface ProductForMenu {
  id: string
  name: string
  nameEn: string
  canBeSold: boolean
  currentCostPerUnit: number
  unit: MeasurementUnit
}

export interface ProductStockInfo {
  productId: string
  currentStock: number
  unit: MeasurementUnit
  lastUpdated: string
}

export const DEFAULT_PRODUCT: Omit<Product, 'id' | 'createdAt' | 'updatedAt'> = {
  name: '',
  description: '',
  category: 'other',
  yieldPercentage: 100,
  usedInDepartments: ['kitchen'], // ‚úÖ DEFAULT
  isActive: true,
  canBeSold: true,
  baseUnit: 'gram',
  baseCostPerUnit: 0,
  packageOptions: [],
  recommendedPackageId: undefined,
  storageConditions: '',
  shelfLife: undefined,
  minStock: 0,
  maxStock: undefined,
  nameEn: '',
  leadTimeDays: 1,
  primarySupplierId: undefined,
  tags: []
}

// ===== UTILITY FUNCTIONS =====

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
 */
export function convertToBaseUnits(
  quantity: number,
  fromUnit: MeasurementUnit,
  baseUnit: BaseUnit
): number {
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const conversions: Record<MeasurementUnit, { gram?: number; ml?: number; piece?: number }> = {
    // –í–µ—Å
    gram: { gram: 1 },
    kg: { gram: 1000 },

    // –û–±—ä–µ–º
    ml: { ml: 1 },
    liter: { ml: 1000 },
    tsp: { ml: 5 }, // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
    tbsp: { ml: 15 }, // ‚úÖ –î–û–ë–ê–í–ò–¢–¨

    // –®—Ç—É—á–Ω—ã–µ
    piece: { piece: 1 },
    pack: { piece: 1 }
  }

  const conversion = conversions[fromUnit]
  if (!conversion) {
    throw new Error(`Unknown unit: ${fromUnit}`)
  }

  const factor = conversion[baseUnit]
  if (factor === undefined) {
    throw new Error(`Cannot convert ${fromUnit} to ${baseUnit}`)
  }

  return quantity * factor
}
