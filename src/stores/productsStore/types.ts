// src/stores/productsStore/types.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –≤–µ—Ä—Å–∏—è

import type { BaseEntity } from '@/types/common'
import type { MeasurementUnit } from '@/types/measurementUnits'

export type ProductCategory =
  | 'meat'
  | 'vegetables'
  | 'fruits'
  | 'dairy'
  | 'cereals'
  | 'spices'
  | 'seafood'
  | 'beverages'
  | 'other'

// üÜï –ù–û–í–´–ô: –ë–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
export type BaseUnit = 'gram' | 'ml' | 'piece'

// ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ô: Product —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –ò —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
export interface Product extends BaseEntity {
  name: string
  description?: string
  category: ProductCategory
  yieldPercentage: number
  isActive: boolean

  // ‚úÖ –§–õ–ê–ì –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
  canBeSold: boolean

  // ‚úÖ –°–¢–ê–†–´–ï –ü–û–õ–Ø (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  unit: MeasurementUnit
  costPerUnit: number

  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø (–±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤)
  baseUnit?: BaseUnit // gram, ml, –∏–ª–∏ piece
  baseCostPerUnit?: number // –¶–µ–Ω–∞ –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –≤ IDR

  // üÜï –ï–î–ò–ù–ò–¶–´ –ó–ê–ö–£–ü–ö–ò (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞)
  purchaseUnit?: MeasurementUnit // –ö–∞–∫ –ø–æ–∫—É–ø–∞–µ–º (–∫–≥, –ª–∏—Ç—Ä, —É–ø–∞–∫–æ–≤–∫–∞)
  purchaseToBaseRatio?: number // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 1 purchaseUnit = X baseUnit
  currentPurchasePrice?: number // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ purchaseUnit –≤ IDR

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
  storageConditions?: string
  shelfLife?: number
  minStock?: number
  maxStock?: number

  // üÜï Enhanced fields
  nameEn?: string
  leadTimeDays?: number
  primarySupplierId?: string
  tags?: string[]
  currentCostPerUnit?: number
}

// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô: ProductsState (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export interface ProductsState {
  products: Product[]
  loading: boolean
  error: string | null
  selectedProduct: Product | null
  useMockMode: boolean

  // üÜï ENHANCED: Extended filters
  filters: {
    category: ProductCategory | 'all'
    isActive: boolean | 'all'
    canBeSold: boolean | 'all'
    search: string
    needsReorder: boolean
    urgencyLevel: 'low' | 'medium' | 'high' | 'critical' | 'all'
  }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: CreateProductData —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
export interface CreateProductData {
  name: string
  category: ProductCategory
  unit: MeasurementUnit // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  costPerUnit: number // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  yieldPercentage: number
  description?: string
  isActive?: boolean
  canBeSold?: boolean
  storageConditions?: string
  shelfLife?: number
  minStock?: number

  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
  baseUnit?: BaseUnit
  baseCostPerUnit?: number
  purchaseUnit?: MeasurementUnit
  purchaseToBaseRatio?: number
  currentPurchasePrice?: number

  // Enhanced fields
  nameEn?: string
  leadTimeDays?: number
  primarySupplierId?: string
  tags?: string[]
}

export interface UpdateProductData extends Partial<CreateProductData> {
  id: string
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const PRODUCT_CATEGORIES: Record<ProductCategory, string> = {
  meat: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
  vegetables: '–û–≤–æ—â–∏',
  fruits: '–§—Ä—É–∫—Ç—ã',
  dairy: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  cereals: '–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏',
  spices: '–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã',
  seafood: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
  beverages: '–ù–∞–ø–∏—Ç–∫–∏',
  other: '–ü—Ä–æ—á–µ–µ'
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
import { PRODUCT_UNITS, getUnitName } from '@/types/measurementUnits'

export const MEASUREMENT_UNITS_FOR_PRODUCTS = PRODUCT_UNITS.reduce(
  (acc, unit) => {
    acc[unit] = getUnitName(unit)
    return acc
  },
  {} as Record<MeasurementUnit, string>
)

export const MEASUREMENT_UNITS = MEASUREMENT_UNITS_FOR_PRODUCTS

// ===== ENHANCED PRODUCT INTERFACE =====

export interface EnhancedProduct extends Product {
  nameEn: string
  descriptionEn?: string
  currentCostPerUnit: number
  recommendedOrderQuantity?: number
  primarySupplierId?: string
  leadTimeDays?: number
  tags?: string[]
}

// ===== STOCK RECOMMENDATIONS TYPES =====

export interface StockRecommendation extends BaseEntity {
  productId: string
  currentStock: number
  recommendedMinStock: number
  recommendedMaxStock: number
  recommendedOrderQuantity: number
  daysUntilReorder: number
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical'
  factors: {
    averageDailyUsage: number
    leadTimeDays: number
    safetyDays: number
    seasonalFactor?: number
  }
  calculatedAt: string
  isActive: boolean
}

export interface ProductUsage extends BaseEntity {
  productId: string
  usedInRecipes: Array<{
    recipeId: string
    recipeName: string
    quantityPerPortion: number
    isActive: boolean
  }>
  usedInPreparations: Array<{
    preparationId: string
    preparationName: string
    quantityPerOutput: number
    isActive: boolean
  }>
  directMenuItems?: Array<{
    menuItemId: string
    menuItemName: string
    variantId: string
    variantName: string
    quantityPerItem: number
    isActive: boolean
  }>
  lastUpdated: string
}

export interface ProductConsumption extends BaseEntity {
  productId: string
  dailyAverageUsage: number
  weeklyAverageUsage: number
  monthlyAverageUsage: number
  trend: 'increasing' | 'decreasing' | 'stable'
  calculatedAt: string
  basedOnDays: number
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: ProductPriceHistory —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
export interface ProductPriceHistory extends BaseEntity {
  productId: string
  pricePerUnit: number // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø: –¶–µ–Ω–∞ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
  basePricePerUnit?: number // IDR –∑–∞ –≥—Ä–∞–º–º/–º–ª/—à—Ç—É–∫—É

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–µ
  purchasePrice?: number // –¶–µ–Ω–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É
  purchaseUnit?: MeasurementUnit // –ï–¥–∏–Ω–∏—Ü–∞ –∑–∞–∫—É–ø–∫–∏
  purchaseQuantity?: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —É–ø–∞–∫–æ–≤–∫–µ

  effectiveDate: string
  sourceType: 'purchase_order' | 'receipt' | 'manual_update'
  sourceId?: string
  supplierId?: string
  notes?: string
}

// ===== CALCULATION PARAMETERS =====

export interface StockCalculationParams {
  safetyDays: number
  maxOrderDays: number
  seasonalFactors?: Record<string, number>
  volatilityThreshold: number
}

export interface CreateStockRecommendationData {
  productId: string
  currentStock: number
  averageDailyUsage: number
  leadTimeDays: number
  safetyDays?: number
}

export interface UpdateStockRecommendationData extends Partial<CreateStockRecommendationData> {
  id: string
}

export interface RecommendationCalculationInput {
  product: Product
  currentStock: number
  consumption: ProductConsumption
  usage: ProductUsage
  calculationParams: StockCalculationParams
}

// ===== CROSS-STORE INTEGRATION TYPES =====

export interface ProductForSupplier {
  id: string
  name: string
  nameEn: string
  currentCostPerUnit: number
  recommendedOrderQuantity: number
  urgencyLevel: StockRecommendation['urgencyLevel']
  primarySupplierId?: string
  leadTimeDays?: number
}

export interface ProductForMenu {
  id: string
  name: string
  nameEn: string
  canBeSold: boolean
  currentCostPerUnit: number
  unit: MeasurementUnit
}

export interface ProductStockInfo {
  productId: string
  currentStock: number
  unit: MeasurementUnit
  lastUpdated: string
}

// ===== UTILITY FUNCTIONS =====

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
 */
export function hasBaseUnitsStructure(product: Product): boolean {
  return !!(product.baseUnit && product.baseCostPerUnit !== undefined)
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç)
 */
export function getProductBaseUnit(product: Product): BaseUnit {
  // –ï—Å–ª–∏ –µ—Å—Ç—å baseUnit, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (product.baseUnit) {
    return product.baseUnit
  }

  // –ò–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
  const category = product.category.toLowerCase()
  const name = product.name.toLowerCase()

  if (['meat', 'vegetables', 'spices', 'cereals'].includes(category)) {
    return 'gram'
  }

  if (category === 'dairy' && name.includes('milk')) {
    return 'ml'
  }

  if (category === 'beverages') {
    return 'piece'
  }

  if (name.includes('oil') || name.includes('liquid')) {
    return 'ml'
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞–º–º—ã
  return 'gram'
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç)
 */
export function getProductBaseCost(product: Product): number {
  // –ï—Å–ª–∏ –µ—Å—Ç—å baseCostPerUnit, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (product.baseCostPerUnit !== undefined) {
    return product.baseCostPerUnit
  }

  // –ò–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const baseUnit = getProductBaseUnit(product)
  let baseCost = product.costPerUnit

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤ –±–∞–∑–æ–≤—ã–µ
  if (baseUnit === 'gram' && product.unit === 'kg') {
    baseCost = product.costPerUnit / 1000 // IDR/–∫–≥ -> IDR/–≥
  } else if (baseUnit === 'ml' && product.unit === 'liter') {
    baseCost = product.costPerUnit / 1000 // IDR/–ª -> IDR/–º–ª
  }

  return baseCost
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ
 */
export function enhanceProduct(product: Product): Product & {
  baseUnit: BaseUnit
  baseCostPerUnit: number
} {
  return {
    ...product,
    baseUnit: getProductBaseUnit(product),
    baseCostPerUnit: getProductBaseCost(product)
  }
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
 */
export function convertToBaseUnits(
  quantity: number,
  fromUnit: MeasurementUnit,
  baseUnit: BaseUnit
): number {
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const conversions: Record<MeasurementUnit, { gram?: number; ml?: number; piece?: number }> = {
    // –í–µ—Å
    gram: { gram: 1 },
    kg: { gram: 1000 },

    // –û–±—ä–µ–º
    ml: { ml: 1 },
    liter: { ml: 1000 },

    // –®—Ç—É—á–Ω—ã–µ
    piece: { piece: 1 },
    pack: { piece: 1 }
  }

  const conversion = conversions[fromUnit]
  if (!conversion) {
    throw new Error(`Unknown unit: ${fromUnit}`)
  }

  const factor = conversion[baseUnit]
  if (factor === undefined) {
    throw new Error(`Cannot convert ${fromUnit} to ${baseUnit}`)
  }

  return quantity * factor
}
