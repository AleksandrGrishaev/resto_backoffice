// src/stores/debug/composables/useDebugStores.ts - –ò–°–ü–†–ê–í–õ–ï–ù–û
import { computed, ref, onMounted, onUnmounted } from 'vue'
import { useDebugStore } from '../debugStore'
import { useDebugFormatting } from './useDebugFormatting'
import { DebugUtils } from '@/utils'
import type { DebugTabId } from '../types'

const MODULE_NAME = 'useDebugStores'

/**
 * –ì–ª–∞–≤–Ω—ã–π composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Debug —Å–∏—Å—Ç–µ–º–æ–π
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç Debug Store –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
export function useDebugStores() {
  const debugStore = useDebugStore()
  const formatting = useDebugFormatting()

  // =============================================
  // STATE
  // =============================================

  const isLoading = computed(() => debugStore.state.loading)
  const error = computed(() => debugStore.state.error)
  const selectedStoreId = computed(() => debugStore.state.selectedStoreId)
  const selectedTab = computed(() => debugStore.state.selectedTab)

  // =============================================
  // DATA
  // =============================================

  const availableStores = computed(() => debugStore.storesSortedByPriority)
  const selectedStore = computed(() => debugStore.selectedStore)
  const selectedStoreData = computed(() => debugStore.selectedStoreData)
  const selectedStoreHistory = computed(() => debugStore.selectedStoreHistory)

  // =============================================
  // FORMATTED DATA
  // =============================================

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   */
  const formattedStructuredData = computed(() => {
    return formatting.formatStructuredData(selectedStoreData.value)
  })

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è UI (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò)
   */
  const formattedHistory = computed(() => {
    if (!selectedStoreHistory.value || selectedStoreHistory.value.length === 0) {
      return []
    }

    try {
      return formatting.formatHistory(selectedStoreHistory.value)
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to format history', { error })
      return []
    }
  })

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ stores
   */
  const formattedStores = computed(() => {
    return availableStores.value.map(store => formatting.formatStoreInfo(store))
  })

  // =============================================
  // SUMMARIES
  // =============================================

  /**
   * –°–≤–æ–¥–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É store
   */
  const storeSummary = computed(() => {
    if (!selectedStoreData.value) return null

    try {
      const data = selectedStoreData.value
      const analysis = data.analysis

      return {
        name: data.name,
        totalItems: analysis.totalItems,
        activeItems: analysis.activeItems,
        inactiveItems: analysis.inactiveItems,
        healthStatus: analysis.health.status,
        lastUpdated: data.timestamp,
        dataBreakdown: analysis.breakdown,
        issuesCount: analysis.health.issues.length,
        warningsCount: analysis.health.warnings.length
      }
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to generate store summary', { error })
      return null
    }
  })

  /**
   * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º stores
   */
  const globalSummary = computed(() => {
    try {
      const stores = availableStores.value
      const history = selectedStoreHistory.value
      const statistics = debugStore.historyStatistics

      return {
        totalStores: stores.length,
        loadedStores: stores.filter(s => s.isLoaded).length,
        totalRecords: stores.reduce((sum, s) => sum + s.recordCount, 0),
        historyEntries: statistics.totalEntries,
        recentActivity: statistics.recentActivity,
        storesWithHistory: statistics.storesWithHistory,
        healthyStores: 0, // TODO: Implement when health tracking is added
        lastUpdate: formatting.formatTimestamp(new Date().toISOString())
      }
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to generate global summary', { error })
      return {
        totalStores: 0,
        loadedStores: 0,
        totalRecords: 0,
        historyEntries: 0,
        recentActivity: 0,
        storesWithHistory: 0,
        healthyStores: 0,
        lastUpdate: 'Error'
      }
    }
  })

  // =============================================
  // ACTIONS
  // =============================================

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è debug —Å–∏—Å—Ç–µ–º—ã
   */
  async function initialize(): Promise<void> {
    try {
      DebugUtils.info(MODULE_NAME, 'useDebugStores mounted')
      await debugStore.initialize()
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to initialize debug stores', { error })
      throw error
    }
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å store
   */
  async function selectStore(storeId: string): Promise<void> {
    try {
      await debugStore.selectStore(storeId)
    } catch (error) {
      DebugUtils.error(MODULE_NAME, `Failed to select store: ${storeId}`, { error })
      throw error
    }
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
   */
  function selectTab(tab: DebugTabId): void {
    debugStore.selectTab(tab)
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π store
   */
  async function refreshCurrentStore(): Promise<void> {
    try {
      await debugStore.refreshStoreData()
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to refresh current store', { error })
      throw error
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ stores
   */
  async function refreshAllStores(): Promise<void> {
    try {
      await debugStore.refreshAllStores()
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to refresh all stores', { error })
      throw error
    }
  }

  // =============================================
  // COPY OPERATIONS
  // =============================================

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async function copyStructuredData(): Promise<void> {
    try {
      await debugStore.copyStoreData('structured')
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to copy structured data', { error })
      throw error
    }
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ store
   */
  async function copyFullData(): Promise<void> {
    try {
      await debugStore.copyStoreData('full')
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to copy full data', { error })
      throw error
    }
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async function copyRawData(): Promise<void> {
    try {
      await debugStore.copyStoreData('raw')
    } catch (error) {
      DebugUtils.error(MODULE_NAME, 'Failed to copy raw data', { error })
      throw error
    }
  }

  // =============================================
  // HISTORY MANAGEMENT
  // =============================================

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ store
   */
  function clearCurrentStoreHistory(): void {
    if (selectedStoreId.value) {
      debugStore.clearHistory(selectedStoreId.value)
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
   */
  function clearAllHistory(): void {
    debugStore.clearHistory()
  }

  // =============================================
  // UTILITY FUNCTIONS
  // =============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  function getHealthColor(status: string): string {
    return formatting.getHealthColor(status)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å timestamp
   */
  function formatTimestamp(timestamp: string): string {
    return formatting.formatTimestamp(timestamp)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ
   */
  function formatNumber(num: number): string {
    return formatting.formatNumber(num)
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
   */
  function clearError(): void {
    debugStore.clearError()
  }

  // =============================================
  // LIFECYCLE
  // =============================================

  onMounted(() => {
    DebugUtils.debug(MODULE_NAME, 'useDebugStores mounted')
  })

  onUnmounted(() => {
    // Cleanup –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    debugStore.cleanup()
  })

  // =============================================
  // RETURN PUBLIC API
  // =============================================

  return {
    // State
    isLoading,
    error,
    selectedStoreId,
    selectedTab,

    // Data
    availableStores,
    selectedStore,
    selectedStoreData,
    selectedStoreHistory,

    // Formatted data (–ò–°–ü–†–ê–í–õ–ï–ù–û - –¥–æ–±–∞–≤–ª–µ–Ω formattedHistory)
    formattedStructuredData,
    formattedHistory, // ‚Üê –≠–¢–û –ò–°–ü–†–ê–í–õ–Ø–ï–¢ –û–®–ò–ë–ö–£
    formattedStores,

    // Summaries
    storeSummary,
    globalSummary,

    // Actions
    initialize,
    selectStore,
    selectTab,
    refreshCurrentStore,
    refreshAllStores,

    // Copy operations
    copyStructuredData,
    copyFullData,
    copyRawData,

    // History management
    clearCurrentStoreHistory,
    clearAllHistory,

    // Utilities
    getHealthColor,
    formatTimestamp,
    formatNumber,
    clearError
  }
}

// =============================================
// DEV HELPERS
// =============================================

if (import.meta.env.DEV) {
  // Expose debug functions globally for development
  setTimeout(() => {
    window.__USE_DEBUG_STORES__ = () => {
      console.log('=== useDebugStores composable ===')
      console.log('Available for testing debug stores functionality')

      const debugStores = useDebugStores()
      console.log('Debug stores instance:', debugStores)

      return debugStores
    }

    console.log('\nüí° useDebugStores loaded! Try:')
    console.log('  ‚Ä¢ window.__USE_DEBUG_STORES__()')
  }, 1000)
}
