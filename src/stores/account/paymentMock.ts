// =============================================
// –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê src/stores/account/paymentMock.ts
// =============================================

import type { PendingPayment, PaymentStatistics } from './types'

const now = new Date().toISOString()

export const mockPendingPayments: PendingPayment[] = [
  // =============================================
  // –ü–õ–ê–¢–ï–ñ–ò –ü–û –ó–ê–ö–ê–ó–ê–ú –ü–û–°–¢–ê–í–©–ò–ö–û–í (—Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏)
  // =============================================
  {
    id: 'payment-credit-main',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 1200000, // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞
    description: 'Purchase order PO-CREDIT-001',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',
    invoiceNumber: 'PO-CREDIT-001',

    // –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
    purchaseOrderId: 'po-credit-test',
    sourceOrderId: 'po-credit-test',
    autoSyncEnabled: true, // –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç–µ–∂ —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π

    // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—É–º–º—ã (–ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–†–ê–ë–û–¢–ê–õ–ê)
    amountHistory: [
      {
        oldAmount: 1500000, // –±—ã–ª–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        newAmount: 1200000, // —Å—Ç–∞–ª–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏
        reason: 'receipt_discrepancy',
        changedAt: createMockDateWithTime(2, '16:35:00.000Z'),
        changedBy: {
          type: 'system',
          id: 'receipt-system',
          name: 'Receipt Processing System'
        },
        notes:
          'Amount adjusted after receipt completion for order PO-CREDIT-001 (discrepancies: quantity)'
      }
    ],

    notes: 'Main payment automatically adjusted after receipt processing',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Test Manager'
    },
    createdAt: createMockDateWithTime(7, '10:15:00.000Z'),
    updatedAt: createMockDateWithTime(2, '16:35:00.000Z')
  },

  // ‚úÖ –ö–†–ï–î–ò–¢ –ü–û–°–¢–ê–í–©–ò–ö–ê –æ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã (–°–û–ó–î–ê–ù –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò)
  {
    id: 'payment-supplier-credit',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 300000, // —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–ø–ª–∞—Ç—ã (1500k - 1200k)
    description: 'Supplier credit from overpayment PO-CREDIT-001',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',

    // –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    sourceOrderId: 'po-credit-test', // –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª—Å—è –∫—Ä–µ–¥–∏—Ç
    autoSyncEnabled: false, // –∫—Ä–µ–¥–∏—Ç –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    amountHistory: [
      {
        oldAmount: 0,
        newAmount: 300000,
        reason: 'supplier_credit',
        changedAt: createMockDateWithTime(2, '16:36:00.000Z'),
        changedBy: {
          type: 'system',
          id: 'receipt-system',
          name: 'Receipt Processing System'
        },
        notes: 'Supplier credit created from order overpayment after receipt completion'
      }
    ],

    notes: 'Available credit from previous order overpayment. Can be used for new orders.',
    createdBy: {
      type: 'system',
      id: 'receipt-system',
      name: 'Receipt Processing System'
    },
    createdAt: createMockDateWithTime(2, '16:36:00.000Z'),
    updatedAt: createMockDateWithTime(2, '16:36:00.000Z')
  },

  // ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ß–ê–°–¢–ò –ö–†–ï–î–ò–¢–ê –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–ü–†–ò–í–Ø–ó–ê–ù –í–†–£–ß–ù–£–Æ)
  {
    id: 'payment-use-credit-partial',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 250000, // –∏—Å–ø–æ–ª—å–∑—É–µ–º 250k –∏–∑ 300k –∫—Ä–µ–¥–∏—Ç–∞
    description: 'Partial use of supplier credit for PO-USE-CREDIT-001',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',

    // –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É
    purchaseOrderId: 'po-using-credit',
    sourceOrderId: 'po-credit-test', // –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—Ä–µ–¥–∏—Ç–∞
    autoSyncEnabled: false, // –∫—Ä–µ–¥–∏—Ç –Ω–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è

    amountHistory: [
      {
        oldAmount: 300000, // –±—ã–ª –ø–æ–ª–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        newAmount: 250000, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ
        reason: 'payment_split',
        changedAt: createMockDateWithTime(1, '11:15:00.000Z'),
        changedBy: {
          type: 'user',
          id: 'user_1',
          name: 'Test Manager'
        },
        notes: 'Used 250k from 300k supplier credit for new order PO-USE-CREDIT-001'
      }
    ],

    notes: 'Partial use of supplier credit. Remaining 50k still available.',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Test Manager'
    },
    createdAt: createMockDateWithTime(1, '11:15:00.000Z'),
    updatedAt: createMockDateWithTime(1, '11:15:00.000Z')
  },

  // ‚úÖ –û–°–¢–ê–í–®–ê–Ø–°–Ø –ß–ê–°–¢–¨ –ö–†–ï–î–ò–¢–ê (–î–û–°–¢–£–ü–ù–ê –î–õ–Ø –ü–†–ò–í–Ø–ó–ö–ò)
  {
    id: 'payment-credit-remaining',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 50000, // –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞
    description: 'Remaining supplier credit from PO-CREDIT-001',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',

    // –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    sourceOrderId: 'po-credit-test',
    autoSyncEnabled: false,

    amountHistory: [
      {
        oldAmount: 300000, // –±—ã–ª –ø–æ–ª–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        newAmount: 50000, // –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 250k
        reason: 'payment_split',
        changedAt: createMockDateWithTime(1, '11:15:00.000Z'),
        changedBy: {
          type: 'user',
          id: 'user_1',
          name: 'Test Manager'
        },
        notes: 'Remaining credit after 250k was used for order PO-USE-CREDIT-001'
      }
    ],

    notes: 'Remaining supplier credit available for future orders.',
    createdBy: {
      type: 'system',
      id: 'credit-split-system',
      name: 'Credit Split System'
    },
    createdAt: createMockDateWithTime(1, '11:15:00.000Z'),
    updatedAt: createMockDateWithTime(1, '11:15:00.000Z')
  },

  // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –°–ß–ï–¢ –∫ –Ω–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É (–ú–û–ñ–ù–û –°–û–ó–î–ê–¢–¨ –ß–ï–†–ï–ó –ò–ù–¢–ï–†–§–ï–ô–°)
  {
    id: 'payment-additional-new',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 550000, // –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ (800k - 250k –∫—Ä–µ–¥–∏—Ç–∞)
    description: 'Additional payment for PO-USE-CREDIT-001',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',

    // –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É
    purchaseOrderId: 'po-using-credit',
    sourceOrderId: 'po-using-credit',
    autoSyncEnabled: true, // –º–æ–∂–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑–æ–º

    notes: 'Additional payment to cover remaining amount after using supplier credit',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Test Manager'
    },
    createdAt: createMockDateWithTime(1, '11:20:00.000Z'),
    updatedAt: createMockDateWithTime(1, '11:20:00.000Z')
  },
  // üì¶ po-001: –ü–ï–†–ï–ü–õ–ê–¢–ê –∏–∑-–∑–∞ –Ω–µ–¥–æ–ø–æ—Å—Ç–∞–≤–∫–∏ (–∑–∞–ø–ª–∞—Ç–∏–ª–∏ 900k, –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ 810k)
  {
    id: 'payment_po_001_full',
    counteragentId: 'sup-premium-meat-co',
    counteragentName: 'Premium Meat Company',
    amount: 900000, // –ó–∞–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ –ø–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑
    description: 'Payment for order PO-001 (beef tenderloin)',
    dueDate: '2025-09-01T00:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'PO-001',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å supplier store
    purchaseOrderId: 'po-001',
    sourceOrderId: 'po-001',
    autoSyncEnabled: true,
    lastAmountUpdate: now,
    amountHistory: [
      {
        oldAmount: 900000,
        newAmount: 900000,
        reason: 'original_order',
        changedAt: '2025-08-30T09:00:00.000Z',
        changedBy: {
          type: 'user',
          id: 'user_1',
          name: 'Admin'
        },
        notes: 'Initial payment amount set based on order total'
      }
      // –ü–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 90k
    ],

    paidAmount: 900000,
    paidDate: '2025-09-01T10:30:00.000Z',
    assignedToAccount: 'acc_1',
    notes: '–ü–ï–†–ï–ü–õ–ê–¢–ê: –∑–∞–ø–ª–∞—á–µ–Ω–æ 900k, –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 810k. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç 90k.',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-30T09:00:00.000Z',
    updatedAt: '2025-09-01T10:30:00.000Z'
  },

  // üì¶ po-002: –¢–û–ß–ù–ê–Ø –û–ü–õ–ê–¢–ê (–±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π)
  {
    id: 'payment_po_002_full',
    counteragentId: 'sup-fresh-veg-market',
    counteragentName: 'Fresh Vegetable Market',
    amount: 130000,
    description: 'Payment for order PO-002 (iceberg lettuce)',
    dueDate: '2025-09-02T00:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'PO-002',

    purchaseOrderId: 'po-002',
    sourceOrderId: 'po-002',
    autoSyncEnabled: true,
    lastAmountUpdate: now,
    amountHistory: [
      {
        oldAmount: 130000,
        newAmount: 130000,
        reason: 'original_order',
        changedAt: '2025-08-31T10:00:00.000Z',
        changedBy: {
          type: 'user',
          id: 'user_2',
          name: 'Manager'
        },
        notes: 'Payment amount matches delivered amount perfectly'
      }
    ],

    paidAmount: 130000,
    paidDate: '2025-09-02T09:15:00.000Z',
    assignedToAccount: 'acc_1',
    notes: '–¢–æ—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –ø—Ä–∏–µ–º–∫–∞ –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π',
    createdBy: {
      type: 'user',
      id: 'user_2',
      name: 'Manager'
    },
    createdAt: '2025-08-31T10:00:00.000Z',
    updatedAt: '2025-09-02T09:15:00.000Z'
  },

  // üì¶ po-003: –ù–ï –û–ü–õ–ê–ß–ï–ù (–∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
  {
    id: 'payment_po_003_pending',
    counteragentId: 'sup-specialty-foods', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    counteragentName: 'Specialty Foods Supply', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    amount: 660000,
    description: 'Payment for order PO-003 (salmon fillet)',
    dueDate: '2025-09-10T00:00:00.000Z',
    priority: 'medium',
    status: 'pending',
    category: 'supplier',
    invoiceNumber: 'PO-003',

    purchaseOrderId: 'po-003',
    sourceOrderId: 'po-003',
    autoSyncEnabled: true,
    lastAmountUpdate: now,
    amountHistory: [
      {
        oldAmount: 660000,
        newAmount: 660000,
        reason: 'original_order',
        changedAt: '2025-09-03T15:00:00.000Z',
        changedBy: {
          type: 'user',
          id: 'user_1',
          name: 'Admin'
        },
        notes: 'Initial payment created for order PO-003'
      }
    ],

    notes: '–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞, –∑–∞—Ç–µ–º –æ–ø–ª–∞—Ç–∞',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-03T15:00:00.000Z',
    updatedAt: '2025-09-03T15:00:00.000Z'
  },

  // üì¶ po-0904-006: –ü–ï–†–ï–ü–õ–ê–¢–ê, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ —Ç–æ—á–Ω—É—é –æ–ø–ª–∞—Ç—É –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏
  {
    id: 'payment_po_0904_006',
    counteragentId: 'sup-beverage-distribution', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    counteragentName: 'Jakarta Beverage Distribution', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    amount: 160000, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏ (–±—ã–ª–æ 240000)
    description: 'Payment for order PO-0904-006 (cola 330ml)',
    dueDate: '2025-09-06T00:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'PO-0904-006',

    purchaseOrderId: 'po-1757014034857',
    sourceOrderId: 'po-1757014034857',
    autoSyncEnabled: true,
    lastAmountUpdate: now,
    amountHistory: [
      {
        oldAmount: 240000,
        newAmount: 240000,
        reason: 'original_order',
        changedAt: '2025-09-04T12:00:00.000Z',
        changedBy: {
          type: 'user',
          id: 'user_1',
          name: 'Admin'
        },
        notes: 'Initial payment for 24 cans at 10k each'
      },
      {
        oldAmount: 240000,
        newAmount: 160000,
        reason: 'receipt_discrepancy',
        changedAt: now,
        changedBy: {
          type: 'system',
          id: 'receipt-system',
          name: 'Receipt Processing System'
        },
        notes:
          'Amount adjusted after receipt completion: received 20 cans at 8k each instead of 24 at 10k'
      }
    ],

    paidAmount: 160000,
    paidDate: '2025-09-04T19:35:00.000Z',
    assignedToAccount: 'acc_1',
    notes: '–°—É–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-04T12:00:00.000Z',
    updatedAt: now
  },

  // =============================================
  // –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏)
  // =============================================

  // üî• –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ - –°–†–û–ß–ù–û –ò –ü–†–û–°–†–û–ß–ï–ù–û
  {
    id: 'payment_utilities_september_urgent',
    counteragentId: 'utility-company',
    counteragentName: 'PT. Listrik Negara',
    amount: 2500000,
    description: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å - –°–†–û–ß–ù–û!',
    dueDate: '2025-09-03T00:00:00.000Z', // –ü–†–û–°–†–û–ß–ö–ê!
    priority: 'urgent',
    status: 'pending',
    category: 'utilities',
    invoiceNumber: 'ELEC-SEP-2025',
    notes: '–í–ù–ò–ú–ê–ù–ò–ï: –£–≥—Ä–æ–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ!',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-28T14:00:00.000Z',
    updatedAt: '2025-08-28T14:00:00.000Z'
  },

  // üßπ –ö–ª–∏–Ω–∏–Ω–≥ - –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
  {
    id: 'payment_cleaning_september',
    counteragentId: 'cleaning-service',
    counteragentName: '–°–ª—É–∂–±–∞ —É–±–æ—Ä–∫–∏',
    amount: 750000,
    description: '–£—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–Ω–≥–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å',
    dueDate: '2025-09-10T00:00:00.000Z',
    priority: 'medium',
    status: 'pending',
    category: 'services',
    invoiceNumber: 'CLEAN-SEP-2025',
    notes: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≥–ª—É–±–æ–∫–∞—è —É–±–æ—Ä–∫–∞',
    createdBy: {
      type: 'user',
      id: 'user_2',
      name: 'Manager'
    },
    createdAt: '2025-09-01T16:00:00.000Z',
    updatedAt: '2025-09-01T16:00:00.000Z'
  },

  // üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –ó–ê–í–ï–†–®–ï–ù
  {
    id: 'payment_equipment_repair_completed',
    counteragentId: 'equipment-repair-service',
    counteragentName: '–°–µ—Ä–≤–∏—Å —Ä–µ–º–æ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    amount: 1250000,
    description: '–†–µ–º–æ–Ω—Ç –ø–ª–∏—Ç—ã –∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞',
    dueDate: '2025-08-25T00:00:00.000Z',
    priority: 'high',
    status: 'completed',
    category: 'maintenance',
    invoiceNumber: 'REPAIR-AUG-024',
    paidAmount: 1250000,
    paidDate: '2025-08-24T11:15:00.000Z',
    assignedToAccount: 'acc_1',
    notes: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-22T13:45:00.000Z',
    updatedAt: '2025-08-24T11:15:00.000Z'
  },

  // üè¢ –ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è - –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
  {
    id: 'payment_rent_october',
    counteragentId: 'landlord-company',
    counteragentName: 'Property Management Co.',
    amount: 15000000,
    description: '–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –∑–∞ –æ–∫—Ç—è–±—Ä—å',
    dueDate: '2025-09-25T00:00:00.000Z',
    priority: 'high',
    status: 'pending',
    category: 'rent',
    invoiceNumber: 'RENT-OCT-2025',
    notes: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-01T08:00:00.000Z',
    updatedAt: '2025-09-01T08:00:00.000Z'
  }
]

// =============================================
// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï UTILITY FUNCTIONS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
// =============================================

export function getPaymentsByStatus(status: string): PendingPayment[] {
  if (status === 'all') return mockPendingPayments
  return mockPendingPayments.filter(payment => payment.status === status)
}

export function getPaymentsByPriority(priority: string): PendingPayment[] {
  if (priority === 'all') return mockPendingPayments
  return mockPendingPayments.filter(payment => payment.priority === priority)
}

export function getOverduePayments(): PendingPayment[] {
  const now = new Date()
  return mockPendingPayments.filter(payment => {
    if (!payment.dueDate || payment.status !== 'pending') return false
    return new Date(payment.dueDate) < now
  })
}

export function getUrgentPayments(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => payment.priority === 'urgent' && payment.status === 'pending'
  )
}

export function getPendingPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.status === 'pending')
}

export function getAssignedPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.assignedToAccount)
}

export function getPaymentsByAccount(accountId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.assignedToAccount === accountId)
}

export function getPaymentsByCounteragent(counteragentId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.counteragentId === counteragentId)
}

// ‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
export function getPaymentsByPurchaseOrder(purchaseOrderId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.purchaseOrderId === purchaseOrderId)
}

export function getSupplierOrderPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.purchaseOrderId)
}

export function getOperationalPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => !payment.purchaseOrderId)
}

export function getPaymentsWithAmountHistory(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => payment.amountHistory && payment.amountHistory.length > 1
  )
}

export function getAutoSyncEnabledPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.autoSyncEnabled)
}

// ============ STATISTICS ============

export function calculatePaymentStatistics(): PaymentStatistics {
  const pending = getPendingPayments()
  const totalAmount = pending.reduce((sum, p) => sum + p.amount, 0)

  const urgent = getUrgentPayments()
  const overdue = getOverduePayments()

  return {
    totalPending: pending.length,
    totalAmount,
    urgentCount: urgent.length,
    overdueCount: overdue.length
  }
}

export function getTotalPendingAmount(): number {
  return getPendingPayments().reduce((sum, payment) => sum + payment.amount, 0)
}

export function getNextUrgentPayment(): PendingPayment | null {
  const urgent = getUrgentPayments()
  if (urgent.length === 0) return null

  return urgent.sort((a, b) => {
    if (!a.dueDate && !b.dueDate) return 0
    if (!a.dueDate) return 1
    if (!b.dueDate) return -1
    return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
  })[0]
}

export function getPaymentsRequiringAttention(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment =>
      payment.status === 'pending' &&
      (payment.priority === 'urgent' || getOverduePayments().includes(payment))
  )
}

function createMockDateWithTime(daysAgo: number, time: string): string {
  const date = new Date()
  date.setDate(date.getDate() - daysAgo)
  const dateStr = date.toISOString().split('T')[0]
  return `${dateStr}T${time}`
}

// ============ SUMMARY FOR DEBUGGING ============

export function getPaymentsSummaryForDebug() {
  const orderPayments = getSupplierOrderPayments()
  const operationalPayments = getOperationalPayments()
  const pending = getPendingPayments()
  const completed = getPaymentsByStatus('completed')
  const withAmountHistory = getPaymentsWithAmountHistory()

  console.log('=== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï PAYMENTS SUMMARY ===')
  console.log(`Total payments: ${mockPendingPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Order-related: ${orderPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Operational: ${operationalPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Pending: ${pending.length}`)
  console.log(`‚îú‚îÄ‚îÄ Completed: ${completed.length}`)
  console.log(`‚îî‚îÄ‚îÄ With amount history: ${withAmountHistory.length}`)

  console.log('\n=== ORDERS COVERAGE (UPDATED) ===')
  console.log('po-001: –ü–ï–†–ï–ü–õ–ê–ß–ï–ù (900k –∑–∞–ø–ª–∞—á–µ–Ω–æ, 810k –ø–æ–ª—É—á–µ–Ω–æ) - –≤–æ–∑–≤—Ä–∞—Ç 90k')
  console.log('po-002: –¢–û–ß–ù–û –û–ü–õ–ê–ß–ï–ù (130k –∑–∞–ø–ª–∞—á–µ–Ω–æ = 130k –ø–æ–ª—É—á–µ–Ω–æ)')
  console.log('po-003: –ù–ï –û–ü–õ–ê–ß–ï–ù (660k –æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏)')
  console.log('po-0904-006: –ê–í–¢–û–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê (240k ‚Üí 160k –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏)')

  console.log('\n=== –ù–û–í–´–ï –ü–û–õ–Ø ===')
  console.log(`Payments with purchaseOrderId: ${orderPayments.length}`)
  console.log(`Payments with autoSync enabled: ${getAutoSyncEnabledPayments().length}`)
  console.log(`Payments with amount history: ${withAmountHistory.length}`)

  return {
    total: mockPendingPayments.length,
    orderRelated: orderPayments.length,
    operational: operationalPayments.length,
    pending: pending.length,
    completed: completed.length,
    withAmountHistory: withAmountHistory.length,
    autoSyncEnabled: getAutoSyncEnabledPayments().length
  }
}
