// =============================================
// –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê src/stores/account/paymentMock.ts
// =============================================

import type { PendingPayment, PaymentStatistics } from './types'

const now = new Date().toISOString()

export const mockPendingPayments: PendingPayment[] = [
  // =============================================
  // –ü–ï–†–ï–ü–õ–ê–ß–ï–ù–ù–´–ô –°–ß–ï–¢ PO-001 (–ø–µ—Ä–µ–ø–ª–∞—Ç–∞ 90k –¥–æ—Å—Ç—É–ø–Ω–∞)
  // =============================================
  {
    id: 'payment_po_001_overpaid',
    counteragentId: 'ca-premium-meat-co', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    counteragentName: 'Premium Meat Company',
    amount: 900000,
    description: 'Payment for order PO-001 (beef tenderloin)',
    dueDate: '2025-09-01T12:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'PMC-2025-001',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ usedAmount
    usedAmount: 810000, // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏
    linkedOrders: [
      {
        orderId: 'po-001',
        orderNumber: 'PO-001',
        linkedAmount: 810000, // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–∞
        linkedAt: '2025-09-01T10:30:00.000Z',
        isActive: true
      }
    ],
    // availableAmount = 900000 - 810000 = 90000 ‚úÖ –î–û–°–¢–£–ü–ù–û

    sourceOrderId: 'po-001',
    autoSyncEnabled: true,
    paidAmount: 900000,
    paidDate: '2025-09-01T10:30:00.000Z',
    assignedToAccount: 'acc_1',

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-30T09:00:00.000Z',
    updatedAt: '2025-09-01T15:30:00.000Z'
  },

  // =============================================
  // –¢–û–ß–ù–û –û–ü–õ–ê–ß–ï–ù–ù–´–ô –°–ß–ï–¢ PO-002 (–±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã)
  // =============================================
  {
    id: 'payment_po_002_exact',
    counteragentId: 'sup-fresh-veg-market', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    counteragentName: 'Fresh Vegetable Market',
    amount: 130000,
    description: 'Payment for order PO-002 (iceberg lettuce)',
    dueDate: '2025-09-02T10:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'FVG-2025-002',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –Ω–µ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
    usedAmount: 130000, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
    linkedOrders: [
      {
        orderId: 'po-002',
        orderNumber: 'PO-002',
        linkedAmount: 130000,
        linkedAt: '2025-09-02T09:15:00.000Z',
        isActive: true
      }
    ],

    sourceOrderId: 'po-002',
    autoSyncEnabled: true,
    paidAmount: 130000,
    paidDate: '2025-09-02T09:15:00.000Z',
    assignedToAccount: 'acc_1',

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-02T08:30:00.000Z',
    updatedAt: '2025-09-02T14:20:00.000Z'
  },

  // =============================================
  // PENDING –°–ß–ï–¢ PO-003 (–æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏)
  // =============================================
  {
    id: 'payment_po_003_pending',
    counteragentId: 'sup-specialty-foods', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    counteragentName: 'Specialty Foods Supply',
    amount: 660000,
    description: 'Payment for order PO-003 (salmon fillet)',
    dueDate: '2025-09-03T16:00:00.000Z',
    priority: 'high',
    status: 'pending',
    category: 'supplier',
    invoiceNumber: 'SFS-2025-003',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: pending, –≤–µ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –∑–∞–∫–∞–∑
    usedAmount: 0, // –ï—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (pending)
    linkedOrders: [
      {
        orderId: 'po-003',
        orderNumber: 'PO-003',
        linkedAmount: 660000, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω
        linkedAt: '2025-09-03T15:00:00.000Z',
        isActive: true
      }
    ],

    sourceOrderId: 'po-003',
    autoSyncEnabled: true,

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-03T14:45:00.000Z',
    updatedAt: '2025-09-03T15:00:00.000Z'
  },

  // =============================================
  // –ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–´–ô –°–ß–ï–¢ PO-0904-006 (240k -> 160k)
  // =============================================
  {
    id: 'payment_po_006_adjusted',
    counteragentId: 'sup-beverage-distribution', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    counteragentName: 'Jakarta Beverage Distribution',
    amount: 160000, // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏
    description: 'Payment for order PO-0904-006 (cola 330ml)',
    dueDate: '2025-09-04T11:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'JBD-2025-006',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª 240k, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ 160k
    usedAmount: 160000, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    linkedOrders: [
      {
        orderId: 'po-1757014034857', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π orderId
        orderNumber: 'PO-0904-006',
        linkedAmount: 160000, // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        linkedAt: '2025-09-04T10:30:00.000Z',
        isActive: true
      }
    ],

    sourceOrderId: 'po-1757014034857',
    autoSyncEnabled: true,

    amountHistory: [
      {
        oldAmount: 240000,
        newAmount: 160000,
        reason: 'receipt_discrepancy',
        changedAt: '2025-09-04T14:30:00.000Z',
        changedBy: {
          type: 'system',
          id: 'receipt-system',
          name: 'Receipt Processing System'
        },
        notes: 'Amount adjusted after receipt: received 20 cans at 8k each instead of 24 at 10k'
      }
    ],

    paidAmount: 160000,
    paidDate: '2025-09-04T16:00:00.000Z',
    assignedToAccount: 'acc_1',

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-04T10:15:00.000Z',
    updatedAt: '2025-09-04T14:30:00.000Z'
  },

  // =============================================
  // –¢–ï–°–¢–û–í–´–ï –ó–ê–ö–ê–ó–´ –ò–ó –î–û–ö–£–ú–ï–ù–¢–û–í
  // =============================================
  {
    id: 'payment_credit_test',
    counteragentId: 'ca-premium-meat-co', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    counteragentName: 'Premium Meat Company',
    amount: 1500000,
    description: 'Payment for order PO-CREDIT-001',
    dueDate: '2025-09-01T12:00:00.000Z',
    priority: 'medium',
    status: 'completed',
    category: 'supplier',
    invoiceNumber: 'PMC-CREDIT-001',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É
    usedAmount: 1200000, // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ
    linkedOrders: [
      {
        orderId: 'po-credit-test', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π orderId
        orderNumber: 'PO-CREDIT-001',
        linkedAmount: 1200000, // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
        linkedAt: '2025-08-31T10:30:00.000Z',
        isActive: true
      }
    ],
    // availableAmount = 1500000 - 1200000 = 300000 ‚úÖ –ë–û–õ–¨–®–ê–Ø –ü–ï–†–ï–ü–õ–ê–¢–ê

    sourceOrderId: 'po-credit-test',
    autoSyncEnabled: true,
    paidAmount: 1500000,
    paidDate: '2025-08-31T16:00:00.000Z',
    assignedToAccount: 'acc_2',

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Test Manager'
    },
    createdAt: '2025-08-31T10:00:00.000Z',
    updatedAt: '2025-09-05T16:30:00.000Z'
  },

  // =============================================
  // –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID)
  // =============================================
  {
    id: 'payment_rent_monthly',
    counteragentId: 'landlord-main', // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    counteragentName: 'Restaurant Space Rental',
    amount: 12000000,
    description: 'Monthly restaurant rent - September 2025',
    dueDate: '2025-09-01T00:00:00.000Z',
    priority: 'urgent',
    status: 'completed',
    category: 'rent',

    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    usedAmount: 12000000,
    linkedOrders: [], // –ù–µ —Å–≤—è–∑–∞–Ω —Å –∑–∞–∫–∞–∑–∞–º–∏

    paidAmount: 12000000,
    paidDate: '2025-08-31T16:00:00.000Z',
    autoSyncEnabled: false,
    assignedToAccount: 'acc_1',

    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-25T10:00:00.000Z',
    updatedAt: '2025-08-31T16:00:00.000Z'
  },

  // =============================================
  // –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏)
  // =============================================

  // üî• –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ - –°–†–û–ß–ù–û –ò –ü–†–û–°–†–û–ß–ï–ù–û
  {
    id: 'payment_utilities_september_urgent',
    counteragentId: 'utility-company',
    counteragentName: 'PT. Listrik Negara',
    amount: 2500000,
    description: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å - –°–†–û–ß–ù–û!',
    dueDate: '2025-09-03T00:00:00.000Z', // –ü–†–û–°–†–û–ß–ö–ê!
    priority: 'urgent',
    status: 'pending',
    category: 'utilities',
    invoiceNumber: 'ELEC-SEP-2025',
    notes: '–í–ù–ò–ú–ê–ù–ò–ï: –£–≥—Ä–æ–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ!',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-28T14:00:00.000Z',
    updatedAt: '2025-08-28T14:00:00.000Z'
  },

  // üßπ –ö–ª–∏–Ω–∏–Ω–≥ - –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
  {
    id: 'payment_cleaning_september',
    counteragentId: 'cleaning-service',
    counteragentName: '–°–ª—É–∂–±–∞ —É–±–æ—Ä–∫–∏',
    amount: 750000,
    description: '–£—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–Ω–≥–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å',
    dueDate: '2025-09-10T00:00:00.000Z',
    priority: 'medium',
    status: 'pending',
    category: 'services',
    invoiceNumber: 'CLEAN-SEP-2025',
    notes: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≥–ª—É–±–æ–∫–∞—è —É–±–æ—Ä–∫–∞',
    createdBy: {
      type: 'user',
      id: 'user_2',
      name: 'Manager'
    },
    createdAt: '2025-09-01T16:00:00.000Z',
    updatedAt: '2025-09-01T16:00:00.000Z'
  },

  // üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –ó–ê–í–ï–†–®–ï–ù
  {
    id: 'payment_equipment_repair_completed',
    counteragentId: 'equipment-repair-service',
    counteragentName: '–°–µ—Ä–≤–∏—Å —Ä–µ–º–æ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    amount: 1250000,
    description: '–†–µ–º–æ–Ω—Ç –ø–ª–∏—Ç—ã –∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞',
    dueDate: '2025-08-25T00:00:00.000Z',
    priority: 'high',
    status: 'completed',
    category: 'maintenance',
    invoiceNumber: 'REPAIR-AUG-024',
    paidAmount: 1250000,
    paidDate: '2025-08-24T11:15:00.000Z',
    assignedToAccount: 'acc_1',
    notes: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-08-22T13:45:00.000Z',
    updatedAt: '2025-08-24T11:15:00.000Z'
  },

  // üè¢ –ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è - –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
  {
    id: 'payment_rent_october',
    counteragentId: 'landlord-company',
    counteragentName: 'Property Management Co.',
    amount: 15000000,
    description: '–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –∑–∞ –æ–∫—Ç—è–±—Ä—å',
    dueDate: '2025-09-25T00:00:00.000Z',
    priority: 'high',
    status: 'pending',
    category: 'rent',
    invoiceNumber: 'RENT-OCT-2025',
    notes: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞',
    createdBy: {
      type: 'user',
      id: 'user_1',
      name: 'Admin'
    },
    createdAt: '2025-09-01T08:00:00.000Z',
    updatedAt: '2025-09-01T08:00:00.000Z'
  }
]

// =============================================
// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï UTILITY FUNCTIONS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
// =============================================

export function getPaymentsByStatus(status: string): PendingPayment[] {
  if (status === 'all') return mockPendingPayments
  return mockPendingPayments.filter(payment => payment.status === status)
}

export function getPaymentsByPriority(priority: string): PendingPayment[] {
  if (priority === 'all') return mockPendingPayments
  return mockPendingPayments.filter(payment => payment.priority === priority)
}

export function getOverduePayments(): PendingPayment[] {
  const now = new Date()
  return mockPendingPayments.filter(payment => {
    if (!payment.dueDate || payment.status !== 'pending') return false
    return new Date(payment.dueDate) < now
  })
}

export function getUrgentPayments(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => payment.priority === 'urgent' && payment.status === 'pending'
  )
}

export function getPendingPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.status === 'pending')
}

export function getAssignedPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.assignedToAccount)
}

export function getPaymentsByAccount(accountId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.assignedToAccount === accountId)
}

export function getPaymentsByCounteragent(counteragentId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.counteragentId === counteragentId)
}

export function getPaymentsWithAmountHistory(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => payment.amountHistory && payment.amountHistory.length > 1
  )
}

export function getAutoSyncEnabledPayments(): PendingPayment[] {
  return mockPendingPayments.filter(payment => payment.autoSyncEnabled)
}

// ‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å linkedOrders

export function getPaymentsByOrder(orderId: string): PendingPayment[] {
  return mockPendingPayments.filter(payment =>
    payment.linkedOrders?.some(order => order.orderId === orderId && order.isActive)
  )
}

// ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
export function getSupplierOrderPayments(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => payment.linkedOrders && payment.linkedOrders.length > 0
  )
}

export function getOperationalPayments(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment => !payment.linkedOrders || payment.linkedOrders.length === 0
  )
}

export function getPaymentsWithAvailableAmount(): PendingPayment[] {
  return mockPendingPayments.filter(payment => {
    // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–∞–∑–∞–º–∏
    if (!payment.linkedOrders || payment.linkedOrders.length === 0) {
      return false // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ AttachBill
    }

    if (payment.status === 'completed') {
      return payment.amount > (payment.usedAmount || 0)
    }

    const linkedAmount = payment.linkedOrders
      .filter(o => o.isActive)
      .reduce((sum, o) => sum + o.linkedAmount, 0)

    return payment.amount > linkedAmount
  })
}

// ============ STATISTICS ============

export function calculatePaymentStatistics(): PaymentStatistics {
  const pending = getPendingPayments()
  const totalAmount = pending.reduce((sum, p) => sum + p.amount, 0)

  const urgent = getUrgentPayments()
  const overdue = getOverduePayments()

  return {
    totalPending: pending.length,
    totalAmount,
    urgentCount: urgent.length,
    overdueCount: overdue.length
  }
}

export function getTotalPendingAmount(): number {
  return getPendingPayments().reduce((sum, payment) => sum + payment.amount, 0)
}

export function getNextUrgentPayment(): PendingPayment | null {
  const urgent = getUrgentPayments()
  if (urgent.length === 0) return null

  return urgent.sort((a, b) => {
    if (!a.dueDate && !b.dueDate) return 0
    if (!a.dueDate) return 1
    if (!b.dueDate) return -1
    return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
  })[0]
}

export function getPaymentsRequiringAttention(): PendingPayment[] {
  return mockPendingPayments.filter(
    payment =>
      payment.status === 'pending' &&
      (payment.priority === 'urgent' || getOverduePayments().includes(payment))
  )
}

// ============ SUMMARY FOR DEBUGGING ============

export function getPaymentsSummaryForDebug() {
  const orderPayments = getSupplierOrderPayments()
  const operationalPayments = getOperationalPayments()
  const pending = getPendingPayments()
  const completed = getPaymentsByStatus('completed')
  const withAmountHistory = getPaymentsWithAmountHistory()
  const withAvailableAmount = getPaymentsWithAvailableAmount()

  console.log('=== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê PAYMENTS SUMMARY ===')
  console.log(`Total payments: ${mockPendingPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Order-related: ${orderPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Operational: ${operationalPayments.length}`)
  console.log(`‚îú‚îÄ‚îÄ Pending: ${pending.length}`)
  console.log(`‚îú‚îÄ‚îÄ Completed: ${completed.length}`)
  console.log(`‚îú‚îÄ‚îÄ With amount history: ${withAmountHistory.length}`)
  console.log(`‚îî‚îÄ‚îÄ With available amount: ${withAvailableAmount.length}`)

  console.log('\n=== –î–û–°–¢–£–ü–ù–´–ï –ü–ï–†–ï–ü–õ–ê–¢–´ ===')
  withAvailableAmount.forEach(payment => {
    const available =
      payment.status === 'completed'
        ? payment.amount - (payment.usedAmount || 0)
        : payment.amount -
          (payment.linkedOrders
            ?.filter(o => o.isActive)
            .reduce((sum, o) => sum + o.linkedAmount, 0) || 0)

    console.log(`${payment.counteragentName}: ${available.toLocaleString()} IDR available`)
  })

  return {
    total: mockPendingPayments.length,
    orderRelated: orderPayments.length,
    operational: operationalPayments.length,
    pending: pending.length,
    completed: completed.length,
    withAmountHistory: withAmountHistory.length,
    withAvailableAmount: withAvailableAmount.length
  }
}
