// src/stores/counteragents/integrations/automatedPayments.ts

import { DebugUtils } from '@/utils'
import type { PurchaseOrder } from '@/stores/supplier_2/types'
import type { PendingPayment } from '@/stores/account/types'

const MODULE_NAME = 'AutomatedPayments'

export class AutomatedPayments {
  // =============================================
  // 1. –ó–ê–ö–ê–ó –°–û –°–¢–ê–¢–£–°–û–ú DELIVERED ‚Üí –ó–ê–î–û–õ–ñ–ï–ù–ù–û–°–¢–¨
  // =============================================

  static async handleOrderReceived(order: PurchaseOrder): Promise<void> {
    try {
      console.log(`üì¶ Order ${order.orderNumber} delivered - creating debt`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (order.status !== 'delivered') return

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—á–µ—Ç
      const { useAccountStore } = await import('@/stores/account')
      const accountStore = useAccountStore()

      await accountStore.fetchPayments()
      const existingBills = await accountStore.getPaymentsByOrder(order.id)
      if (existingBills.length > 0) {
        console.log(`Bill already exists for order ${order.orderNumber}`)
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
      const debtAmount = order.actualDeliveredAmount || order.totalAmount

      await accountStore.createPayment({
        counteragentId: order.supplierId,
        counteragentName: order.supplierName,
        amount: debtAmount,
        description: `–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∑–∞–∫–∞–∑—É ${order.orderNumber}`,
        category: 'supplier',
        invoiceNumber: `DEBT-${order.orderNumber}`,
        priority: 'medium',

        // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∑–∞–∫–∞–∑–æ–º
        linkedOrders: [
          {
            orderId: order.id,
            orderNumber: order.orderNumber,
            linkedAmount: debtAmount,
            linkedAt: new Date().toISOString(),
            isActive: true
          }
        ],

        autoCreated: true,
        sourceOrderId: order.id,

        createdBy: {
          type: 'system',
          id: 'auto_system',
          name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞'
        }
      })

      console.log(`‚úÖ Debt created: ${debtAmount} for order ${order.orderNumber}`)

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
      await this.updateCounteragentBalance(order.supplierId)
    } catch (error) {
      console.error('Failed to create debt from order:', error)
    }
  }

  // =============================================
  // 2. –°–ß–ï–¢ –û–ü–õ–ê–ß–ï–ù ‚Üí –û–ë–ù–û–í–õ–Ø–ï–ú –ë–ê–õ–ê–ù–°
  // =============================================

  static async handlePaymentCompleted(payment: PendingPayment): Promise<void> {
    try {
      console.log(`üí∞ Payment ${payment.id} completed - updating balance`)

      if (payment.status !== 'completed') return

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
      if (payment.counteragentId) {
        await this.updateCounteragentBalance(payment.counteragentId)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      if (payment.linkedOrders?.length) {
        for (const orderLink of payment.linkedOrders) {
          if (!orderLink.isActive) continue
          await this.updateOrderBillStatus(orderLink.orderId)
        }
      }

      console.log(`‚úÖ Payment processed: ${payment.amount}`)
    } catch (error) {
      console.error('Failed to handle completed payment:', error)
    }
  }

  // =============================================
  // 3. –ü–ï–†–ï–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê
  // =============================================

  static async updateCounteragentBalance(counteragentId: string): Promise<void> {
    try {
      const { useAccountStore, useCounteragentsStore } = await Promise.all([
        import('@/stores/account'),
        import('@/stores/counteragents')
      ]).then(([account, counteragents]) => ({
        useAccountStore: account.useAccountStore,
        useCounteragentsStore: counteragents.useCounteragentsStore
      }))

      const accountStore = useAccountStore()
      const counteragentsStore = useCounteragentsStore()

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
      await accountStore.fetchPayments()

      const allPayments = accountStore.state.pendingPayments || []
      const payments = allPayments.filter(p => p.counteragentId === counteragentId) || []

      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
      let totalDebt = 0 // pending –ø–ª–∞—Ç–µ–∂–∏ = –¥–æ–ª–≥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
      let totalPaid = 0 // completed –ø–ª–∞—Ç–µ–∂–∏ = –Ω–∞—à–∏ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É

      for (const payment of payments) {
        const amount = payment.amount || 0

        if (payment.status === 'pending') {
          totalDebt += amount // –î–æ–ª–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        } else if (payment.status === 'completed') {
          totalPaid += amount // –û–ø–ª–∞—á–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        }
      }

      // –ë–ê–õ–ê–ù–° = –æ–ø–ª–∞—á–µ–Ω–æ –º–∏–Ω—É—Å –¥–æ–ª–≥–∏
      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å = –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
      // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å = –ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–º (–∏–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)
      const currentBalance = totalPaid - totalDebt

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined
      await counteragentsStore.updateCounteragent(counteragentId, {
        currentBalance: currentBalance || 0,
        lastBalanceUpdate: new Date().toISOString()
      })

      console.log(`üìä Balance updated for ${counteragentId}: ${currentBalance}`, {
        totalDebt,
        totalPaid,
        paymentsCount: payments.length
      })
    } catch (error) {
      console.error('Failed to update counteragent balance:', error)

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ 0
      try {
        const { useCounteragentsStore } = await import('@/stores/counteragents')
        const counteragentsStore = useCounteragentsStore()
        await counteragentsStore.updateCounteragent(counteragentId, {
          currentBalance: 0,
          lastBalanceUpdate: new Date().toISOString()
        })
      } catch (fallbackError) {
        console.error('Failed to set fallback balance:', fallbackError)
      }
    }
  }

  // =============================================
  // 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –°–ß–ï–¢–ê –ó–ê–ö–ê–ó–ê
  // =============================================

  static async updateOrderBillStatus(orderId: string): Promise<void> {
    try {
      const { useSupplierStore, useAccountStore } = await Promise.all([
        import('@/stores/supplier_2'),
        import('@/stores/account')
      ]).then(([supplier, account]) => ({
        useSupplierStore: supplier.useSupplierStore,
        useAccountStore: account.useAccountStore
      }))

      const supplierStore = useSupplierStore()
      const accountStore = useAccountStore()

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getOrders
      await supplierStore.getOrders()
      const order = supplierStore.state.orders.find(o => o.id === orderId)
      if (!order) return

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
      await accountStore.fetchPayments()
      const bills = await accountStore.getPaymentsByOrder(orderId)

      let totalBilled = 0
      let totalPaid = 0

      for (const bill of bills) {
        const orderLink = bill.linkedOrders?.find(link => link.orderId === orderId && link.isActive)
        if (!orderLink) continue

        totalBilled += orderLink.linkedAmount

        if (bill.status === 'completed') {
          totalPaid += orderLink.linkedAmount
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      let newBillStatus: string

      if (totalBilled === 0) {
        newBillStatus = 'not_billed'
      } else if (totalPaid === 0) {
        newBillStatus = 'billed'
      } else if (totalPaid >= totalBilled) {
        newBillStatus = 'fully_paid'
      } else {
        newBillStatus = 'partially_paid'
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (order.billStatus !== newBillStatus) {
        await supplierStore.updateOrder(orderId, {
          billStatus: newBillStatus,
          billStatusCalculatedAt: new Date().toISOString()
        })

        console.log(`üìù Order ${order.orderNumber} bill status: ${newBillStatus}`)
      }
    } catch (error) {
      console.error('Failed to update order bill status:', error)
    }
  }

  // =============================================
  // 5. –•–£–ö–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
  // =============================================

  static async onOrderStatusChanged(order: PurchaseOrder, previousStatus?: string): Promise<void> {
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (order.status === 'delivered' && previousStatus !== 'delivered') {
      await this.handleOrderReceived(order)
    }
  }

  static async onPaymentStatusChanged(
    payment: PendingPayment,
    previousStatus?: string
  ): Promise<void> {
    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å—Ç–∞–ª –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
    if (payment.status === 'completed' && previousStatus !== 'completed') {
      await this.handlePaymentCompleted(payment)
    }
  }
}

// =============================================
// –ú–ï–¢–û–î–´ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í STORES
// =============================================

// –î–õ–Ø ACCOUNT STORE - –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –º–µ—Ç–æ–¥—ã:
export const accountStoreMethods = `
// –î–æ–±–∞–≤–∏—Ç—å –≤ src/stores/account/store.ts:

async function getPaymentsByCounteragent(counteragentId: string): Promise<PendingPayment[]> {
  try {
    await fetchPayments()
    return state.value.pendingPayments.filter(payment =>
      payment.counteragentId === counteragentId
    )
  } catch (error) {
    console.error('Failed to get payments by counteragent:', error)
    return []
  }
}

// –ò –≤ return –¥–æ–±–∞–≤–∏—Ç—å:
return {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
  getPaymentsByCounteragent
}
`

// –î–õ–Ø SUPPLIER STORE - –¥–æ–±–∞–≤–∏—Ç—å –≤ updateOrder:
export const supplierStoreIntegration = `
// –í src/stores/supplier_2/supplierStore.ts –≤ —Ñ—É–Ω–∫—Ü–∏–∏ updateOrder, –¥–æ–±–∞–≤–∏—Ç—å –ü–ï–†–ï–î return:

try {
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const originalOrder = state.value.orders.find(o => o.id === id)

  if (originalOrder && data.status && data.status !== originalOrder.status) {
    const { AutomatedPayments } = await import('@/stores/counteragents/integrations/automatedPayments')

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    AutomatedPayments.onOrderStatusChanged(updatedOrder, originalOrder.status).catch(error => {
      console.warn('Order automation failed:', error)
    })
  }
} catch (error) {
  console.warn('Failed to trigger order automation:', error)
}
`

// –î–õ–Ø ACCOUNT STORE - –¥–æ–±–∞–≤–∏—Ç—å –≤ updatePayment:
export const accountStoreIntegration = `
// –í src/stores/account/store.ts –≤ —Ñ—É–Ω–∫—Ü–∏–∏ updatePayment, –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ:

try {
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const originalPayment = state.value.pendingPayments.find(p => p.id === paymentId)

  if (originalPayment && updates.status && updates.status !== originalPayment.status) {
    const { AutomatedPayments } = await import('@/stores/counteragents/integrations/automatedPayments')

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    AutomatedPayments.onPaymentStatusChanged(updatedPayment, originalPayment.status).catch(error => {
      console.warn('Payment automation failed:', error)
    })
  }
} catch (error) {
  console.warn('Failed to trigger payment automation:', error)
}
`
