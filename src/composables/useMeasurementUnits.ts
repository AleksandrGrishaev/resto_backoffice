// src/composables/useMeasurementUnits.ts - UNIFIED: –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
import { computed } from 'vue'
import type { MeasurementUnit, UnitType } from '@/types/measurementUnits'
import {
  MEASUREMENT_UNITS,
  UNITS_BY_TYPE,
  getUnitInfo,
  getUnitShortName,
  getUnitName,
  areUnitsCompatible,
  convertUnits,
  formatWithUnit,
  getUnitsForContext,
  isValidUnit,
  isUnitValidForContext
} from '@/types/measurementUnits'

/**
 * –ì–õ–ê–í–ù–´–ô composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –µ–¥–∏–Ω–∏—Ü
 */
export function useMeasurementUnits() {
  // =============================================
  // –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // =============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  const getAllUnits = computed(() => MEASUREMENT_UNITS)

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –ø–æ —Ç–∏–ø—É
   */
  const getUnitsByTypeComputed = (type: UnitType) => computed(() => UNITS_BY_TYPE[type])

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  const getContextUnits = (context: 'products' | 'recipes' | 'menu') =>
    computed(() => getUnitsForContext(context))

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è select –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  const getUnitOptions = (context?: 'products' | 'recipes' | 'menu') =>
    computed(() => {
      const units = context
        ? getUnitsForContext(context)
        : (Object.keys(MEASUREMENT_UNITS) as MeasurementUnit[])

      return units.map(unit => ({
        value: unit,
        title: getUnitName(unit),
        shortText: getUnitShortName(unit),
        type: MEASUREMENT_UNITS[unit].type
      }))
    })

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
   */
  const getGroupedUnitOptions = (context?: 'products' | 'recipes' | 'menu') =>
    computed(() => {
      const units = context
        ? getUnitsForContext(context)
        : (Object.keys(MEASUREMENT_UNITS) as MeasurementUnit[])

      const grouped: Record<
        UnitType,
        Array<{ value: MeasurementUnit; text: string; shortText: string }>
      > = {
        weight: [],
        volume: [],
        piece: [],
        culinary: []
      }

      units.forEach(unit => {
        const info = MEASUREMENT_UNITS[unit]
        grouped[info.type].push({
          value: unit,
          text: info.name,
          shortText: info.shortName
        })
      })

      return Object.entries(grouped)
        .filter(([_, items]) => items.length > 0)
        .map(([type, items]) => ({
          label: getTypeLabel(type as UnitType),
          items
        }))
    })

  // =============================================
  // –£–¢–ò–õ–ò–¢–´
  // =============================================

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  const safeConvertUnits = (
    value: number,
    fromUnit: MeasurementUnit,
    toUnit: MeasurementUnit
  ): { success: boolean; value?: number; error?: string } => {
    try {
      const convertedValue = convertUnits(value, fromUnit, toUnit)
      return { success: true, value: convertedValue }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Conversion error'
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –µ–¥–∏–Ω–∏—Ü–µ–π
   */
  const formatQuantity = (
    value: number,
    unit: MeasurementUnit,
    options?: {
      showFullName?: boolean
      precision?: number
    }
  ) => formatWithUnit(value, unit, options)

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  const validateUnitForContext = (
    unit: MeasurementUnit,
    context: 'products' | 'recipes' | 'menu'
  ): { valid: boolean; error?: string } => {
    if (!isValidUnit(unit)) {
      return { valid: false, error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${unit}` }
    }

    if (!isUnitValidForContext(unit, context)) {
      return { valid: false, error: `–ï–¥–∏–Ω–∏—Ü–∞ ${unit} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ${context}` }
    }

    return { valid: true }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
   */
  const getSuggestedUnit = (value: number, currentUnit: MeasurementUnit): MeasurementUnit => {
    const unitInfo = MEASUREMENT_UNITS[currentUnit]

    // –î–ª—è –≤–µ—Å–∞: –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000–≥, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–≥
    if (unitInfo.type === 'weight' && currentUnit === 'gram' && value >= 1000) {
      return 'kg'
    }

    // –î–ª—è –≤–µ—Å–∞: –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1–∫–≥, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥—Ä–∞–º–º—ã
    if (unitInfo.type === 'weight' && currentUnit === 'kg' && value < 1) {
      return 'gram'
    }

    // –î–ª—è –æ–±—ä–µ–º–∞: –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000–º–ª, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª–∏—Ç—Ä—ã
    if (unitInfo.type === 'volume' && currentUnit === 'ml' && value >= 1000) {
      return 'liter'
    }

    // –î–ª—è –æ–±—ä–µ–º–∞: –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1–ª, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–ª
    if (unitInfo.type === 'volume' && currentUnit === 'liter' && value < 1) {
      return 'ml'
    }

    return currentUnit
  }

  // =============================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // =============================================

  function getTypeLabel(type: UnitType): string {
    const labels: Record<UnitType, string> = {
      weight: '–í–µ—Å',
      volume: '–û–±—ä–µ–º',
      piece: '–®—Ç—É—á–Ω—ã–µ',
      culinary: '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ä—ã'
    }
    return labels[type]
  }

  // =============================================
  // –í–û–ó–í–†–ê–©–ê–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
  // =============================================

  return {
    // Computed –∑–Ω–∞—á–µ–Ω–∏—è
    allUnits: getAllUnits,

    // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    getUnitInfo,
    getUnitName,
    getUnitShortName,
    getUnitsByType: getUnitsByTypeComputed,
    getContextUnits,
    getUnitOptions,
    getGroupedUnitOptions,

    // –£—Ç–∏–ª–∏—Ç—ã
    areUnitsCompatible,
    convertUnits,
    safeConvertUnits,
    formatQuantity,
    validateUnitForContext,
    getSuggestedUnit,

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    isValidUnit,
    isUnitValidForContext,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    MEASUREMENT_UNITS,
    UNITS_BY_TYPE
  }
}

// =============================================
// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –≠–ö–°–ü–û–†–¢–´ (–∑–∞–º–µ–Ω—è—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)
// =============================================

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π composable –¥–ª—è –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * –ó–ê–ú–ï–ù–Ø–ï–¢: src/composables/useProductUnits.ts
 */
export function useProductUnits() {
  const { getContextUnits, getUnitOptions, validateUnitForContext } = useMeasurementUnits()

  return {
    units: getContextUnits('products'),
    unitOptions: getUnitOptions('products'),
    validateUnit: (unit: MeasurementUnit) => validateUnitForContext(unit, 'products')
  }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π composable –¥–ª—è –µ–¥–∏–Ω–∏—Ü —Ä–µ—Ü–µ–ø—Ç–æ–≤
 */
export function useRecipeUnits() {
  const { getContextUnits, getUnitOptions, validateUnitForContext } = useMeasurementUnits()

  return {
    units: getContextUnits('recipes'),
    unitOptions: getUnitOptions('recipes'),
    validateUnit: (unit: MeasurementUnit) => validateUnitForContext(unit, 'recipes')
  }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π composable –¥–ª—è –µ–¥–∏–Ω–∏—Ü –º–µ–Ω—é
 */
export function useMenuUnits() {
  const { getContextUnits, getUnitOptions, validateUnitForContext } = useMeasurementUnits()

  return {
    units: getContextUnits('menu'),
    unitOptions: getUnitOptions('menu'),
    validateUnit: (unit: MeasurementUnit) => validateUnitForContext(unit, 'menu')
  }
}

// =============================================
// –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ï–î–ò–ù–ò–¶ (–∑–∞–º–µ–Ω—è–µ—Ç currency.convertToBaseUnits)
// =============================================

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
 * –ó–ê–ú–ï–ù–Ø–ï–¢: currency.convertToBaseUnits()
 */
export function convertToBaseUnits(
  quantity: number,
  fromUnit: string,
  targetType: 'weight' | 'volume' | 'piece'
): { success: boolean; value?: number; baseUnit?: string; error?: string } {
  try {
    // –ú–∞–ø–∏–Ω–≥ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
    const baseUnits = {
      weight: 'gram' as MeasurementUnit,
      volume: 'ml' as MeasurementUnit,
      piece: 'piece' as MeasurementUnit
    }

    const baseUnit = baseUnits[targetType]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ fromUnit –≤–∞–ª–∏–¥–Ω—ã–π
    if (!isValidUnit(fromUnit as MeasurementUnit)) {
      return {
        success: false,
        error: `Unknown unit: ${fromUnit}`
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    const convertedValue = convertUnits(quantity, fromUnit as MeasurementUnit, baseUnit)

    return {
      success: true,
      value: convertedValue,
      baseUnit: baseUnit
    }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Conversion failed'
    }
  }
}

// =============================================
// MIGRATION HELPERS
// =============================================

/**
 * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º –µ–¥–∏–Ω–∏—Ü
 */
export function migrationHelper() {
  console.warn(`
üîÑ MIGRATION GUIDE - Unified Measurement Units

Old imports to replace:
‚ùå import { useProductUnits } from '@/composables/useProductUnits'
‚ùå import { convertToBaseUnits } from '@/utils/currency'

New imports to use:
‚úÖ import { useProductUnits, convertToBaseUnits } from '@/composables/useMeasurementUnits'
‚úÖ import { useMeasurementUnits } from '@/composables/useMeasurementUnits'

Files to DELETE after migration:
üìÅ src/composables/useProductUnits.ts
üîß convertToBaseUnits() from src/utils/currency.ts
  `)
}
