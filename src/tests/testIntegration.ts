// src/utils/testIntegration.ts

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Product ‚Üî Recipe Store
 */
export async function simpleIntegrationTest() {
  console.clear()
  console.log('üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò')
  console.log('='.repeat(30))

  try {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º stores
    const { useProductsStore } = await import('@/stores/productsStore')
    const { useRecipesStore } = await import('@/stores/recipes')

    const productStore = useProductsStore()
    const recipeStore = useRecipesStore()

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üì¶ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã...')
    await productStore.loadProducts(true) // mock —Ä–µ–∂–∏–º
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${productStore.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)

    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º recipe store (—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π)
    console.log('\nüë®‚Äçüç≥ –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Recipe Store...')
    await recipeStore.initialize()
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${recipeStore.activePreparations.length} –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤`)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é - –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
    console.log('\nüîó –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...')
    const testProduct = await productStore.getProductForRecipe('prod-tomato')
    if (testProduct) {
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      console.log(`   –ü—Ä–æ–¥—É–∫—Ç: ${testProduct.name}`)
      console.log(`   –¶–µ–Ω–∞: ${testProduct.costPerUnit}`)
      console.log(`   –ï–¥–∏–Ω–∏—Ü–∞: ${testProduct.unit}`)
    } else {
      console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return false
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
    console.log('\nüßÆ –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏...')
    const preparations = recipeStore.activePreparations
    if (preparations.length > 0) {
      const testPrep = preparations[0]
      console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testPrep.name}`)
      console.log(`   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: ${testPrep.recipe.length}`)

      try {
        const cost = await recipeStore.calculatePreparationCost(testPrep.id)
        console.log('‚úÖ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–µ–Ω!')
        console.log(`   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${cost.totalCost.toFixed(2)}`)
        console.log(`   –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ ${testPrep.outputUnit}: $${cost.costPerOutputUnit.toFixed(2)}`)
        console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ä–∞—Å—á–µ—Ç–µ: ${cost.componentCosts.length}`)
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error)
        return false
      }
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    console.log('\nüí∞ –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã...')
    const oldPrice = testProduct.costPerUnit
    const newPrice = oldPrice * 1.2 // +20%

    console.log(`   –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–º–∞—Ç–æ–≤: ${oldPrice}`)
    console.log(`   –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–º–∞—Ç–æ–≤: ${newPrice}`)

    try {
      await productStore.notifyPriceChange('prod-tomato', newPrice)
      console.log('‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!')
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error)
      return false
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –®–∞–≥ 6: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...')
    const costsMap = recipeStore.preparationService.getAllCostCalculations()
    console.log(`   –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π: ${costsMap.size}`)

    if (costsMap.size > 0) {
      console.log('\n   –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤:')
      let count = 0
      costsMap.forEach((cost, prepId) => {
        if (count < 3) {
          const prep = recipeStore.getPreparationById(prepId)
          if (prep) {
            console.log(`   ‚Ä¢ ${prep.name}: $${cost.totalCost.toFixed(2)}`)
          }
          count++
        }
      })
    }

    console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!')
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Product ‚Üî Recipe Store —Ä–∞–±–æ—Ç–∞–µ—Ç')

    return true
  } catch (error) {
    console.log('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!')
    console.error('–û—à–∏–±–∫–∞:', error)
    return false
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ window –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if (import.meta.env.DEV) {
  window.__SIMPLE_INTEGRATION_TEST__ = simpleIntegrationTest

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    console.log('\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:')
    console.log('   window.__SIMPLE_INTEGRATION_TEST__()')
  }, 2000)
}
