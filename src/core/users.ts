// src/core/users.ts - –ù–ê –û–°–ù–û–í–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ config/users.ts
import type { User, UserRole, AppType } from '../stores/auth/auth'

// ===== –ò–ú–ü–û–†–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
import { ROLE_CONFIGS, DEFAULT_USERS, UserUtils } from '@/config/users'

// ===== –†–ê–°–®–ò–†–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

export const CORE_USERS = [
  ...DEFAULT_USERS, // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω
  // üÜï –ù–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
  {
    name: 'Restaurant Manager',
    pin: '2345',
    roles: ['manager'] as UserRole[],
    isActive: true,
    description: 'Restaurant manager with operational access'
  },
  {
    name: 'Cashier User',
    pin: '3456',
    roles: ['cashier'] as UserRole[],
    isActive: true,
    description: 'Cashier for POS operations'
  }
]

// ===== CORE USER SERVICE =====

export class CoreUserService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static getActiveUsers() {
    return CORE_USERS.filter(user => user.isActive)
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ PIN
   */
  static findByPin(pin: string) {
    return CORE_USERS.find(user => user.pin === pin && user.isActive) || null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getDefaultRoute(roles: UserRole[]): string {
    if (roles.includes('admin')) return '/menu'
    if (roles.includes('manager')) return '/menu'
    if (roles.includes('cashier')) return '/pos'
    return '/unauthorized'
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
   */
  static canEdit(roles: UserRole[]): boolean {
    return roles.some(role => ['admin', 'manager'].includes(role))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã
   */
  static canViewFinances(roles: UserRole[]): boolean {
    return roles.includes('admin')
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
   */
  static getRoleDisplayName(role: UserRole): string {
    const roleNames: Record<UserRole, string> = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      cashier: '–ö–∞—Å—Å–∏—Ä',
      kitchen: '–ü–æ–≤–∞—Ä',
      bar: '–ë–∞—Ä–º–µ–Ω'
    }
    return roleNames[role] || role
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UserUtils)
   */
  static hasAppAccess(roles: UserRole[], appType: AppType): boolean {
    return UserUtils.hasAppAccess(roles, appType)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UserUtils)
   */
  static hasPermission(roles: UserRole[], permission: string): boolean {
    return UserUtils.hasPermission(roles, permission)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UserUtils)
   */
  static getRolePermissions(role: UserRole): string[] {
    return UserUtils.getRolePermissions(role)
  }
}

// ===== RE-EXPORT –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
export { ROLE_CONFIGS, UserUtils } from '@/config/users'
