// src/router/index.ts - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å POS –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
import { createRouter, createWebHistory } from 'vue-router'
import type { RouteRecordRaw } from 'vue-router'

// ===== LAYOUTS =====
import AuthLayout from '@/layouts/AuthLayout.vue'
import MainLayout from '@/layouts/MainLayout.vue'
import PosLayout from '@/layouts/PosLayout.vue'

// ===== AUTH VIEWS =====
import LoginView from '@/views/auth/LoginView.vue'
import UnauthorizedView from '@/views/auth/UnauthorizedView.vue'
import NotFoundView from '@/views/NotFoundView.vue'

// ===== BACKOFFICE VIEWS =====
import MenuView from '@/views/menu/MenuView.vue'
import ProductsView from '@/views/products/ProductsView.vue'
import StorageView from '@/views/storage/StorageView.vue'
import PreparationView from '@/views/preparation/PreparationView.vue'
import SupplierView from '@/views/supplier_2/SupplierView.vue'
import CounteragentsView from '@/views/counteragents/CounteragentsView.vue'
import AccountListView from '@/views/accounts/AccountListView.vue'
import AccountDetailView from '@/views/accounts/AccountDetailView.vue'
import PaymentSettingsView from '@/views/PaymentSettingsView.vue'

// ===== POS VIEWS =====
import PosMainView from '@/views/pos/PosMainView.vue'

// ===== DEBUG VIEWS (DEV ONLY) =====
import DebugView from '@/views/debug/DebugView.vue'

// ===== AUTH SYSTEM =====
import { useAuthStore } from '@/stores/auth'
import { useAuth, usePermissions } from '@/stores/auth/composables'
import { CoreUserService } from '@/core/users'

// ===== ROUTES CONFIGURATION =====

const routes: RouteRecordRaw[] = [
  // ===== AUTHENTICATION ROUTES =====
  {
    path: '/auth',
    component: AuthLayout,
    children: [
      {
        path: 'login',
        name: 'login',
        component: LoginView,
        meta: {
          requiresAuth: false,
          title: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
        }
      }
    ]
  },

  // ===== POS ROUTES =====
  {
    path: '/pos',
    name: 'pos',
    component: () => import('@/views/pos/PosMainView.vue'), // ‚úÖ –ü—Ä—è–º–æ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    meta: {
      requiresAuth: true,
      allowedRoles: ['admin', 'cashier'],
      title: 'POS —Å–∏—Å—Ç–µ–º–∞'
    }
  },

  // ===== BACKOFFICE ROUTES =====
  {
    path: '/',
    component: MainLayout,
    meta: { requiresAuth: true },
    children: [
      {
        path: '',
        redirect: '/menu'
      },
      // === –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===
      {
        path: 'menu',
        name: 'menu',
        component: MenuView,
        meta: {
          title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –ü—Ä–æ–¥—É–∫—Ç—ã ===
      {
        path: 'products',
        name: 'products',
        component: ProductsView,
        meta: {
          title: '–ü—Ä–æ–¥—É–∫—Ç—ã',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –†–µ—Ü–µ–ø—Ç—ã ===
      {
        path: 'recipes',
        name: 'recipes',
        component: () => import('@/views/recipes/RecipesView.vue'),
        meta: {
          title: '–†–µ—Ü–µ–ø—Ç—ã',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã ===
      {
        path: 'preparations',
        name: 'preparations',
        component: PreparationView,
        meta: {
          title: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –°–∫–ª–∞–¥ ===
      {
        path: 'storage',
        name: 'storage',
        component: StorageView,
        meta: {
          title: '–°–∫–ª–∞–¥',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ ===
      {
        path: 'suppliers',
        name: 'suppliers',
        component: SupplierView,
        meta: {
          title: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã ===
      {
        path: 'counteragents',
        name: 'counteragents',
        component: CounteragentsView,
        meta: {
          title: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã',
          allowedRoles: ['admin', 'manager']
        }
      },
      // === –°—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
      {
        path: 'accounts',
        meta: {
          allowedRoles: ['admin']
        },
        children: [
          {
            path: '',
            name: 'accounts-list',
            component: AccountListView,
            meta: {
              title: '–°—á–µ—Ç–∞'
            }
          },
          {
            path: ':id',
            name: 'account-detail',
            component: AccountDetailView,
            meta: {
              title: '–î–µ—Ç–∞–ª–∏ —Å—á–µ—Ç–∞'
            }
          }
        ]
      },
      // === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
      {
        path: 'payment-settings',
        name: 'payment-settings',
        component: PaymentSettingsView,
        meta: {
          title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
          allowedRoles: ['admin']
        }
      },
      // === Debug –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) ===
      ...(import.meta.env.DEV
        ? [
            {
              path: 'debug',
              children: [
                {
                  path: 'stores',
                  name: 'debug-stores',
                  component: DebugView,
                  meta: {
                    title: 'Debug Stores',
                    requiresDev: true,
                    allowedRoles: ['admin']
                  }
                }
              ]
            }
          ]
        : [])
    ]
  },

  // ===== ERROR ROUTES =====
  {
    path: '/unauthorized',
    name: 'unauthorized',
    component: UnauthorizedView,
    meta: {
      requiresAuth: true,
      title: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
    }
  },
  {
    path: '/:pathMatch(.*)*',
    name: 'not-found',
    component: NotFoundView,
    meta: {
      title: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
]

// ===== ROUTER CREATION =====

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes
})

// ===== NAVIGATION GUARDS =====

router.beforeEach(async (to, from, next) => {
  try {
    const authStore = useAuthStore()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ dev —Ä–µ–∂–∏–º–∞ –¥–ª—è debug —Ä–æ—É—Ç–æ–≤
    if (to.meta.requiresDev && !import.meta.env.DEV) {
      console.warn('Debug routes are only available in development mode')
      next({ name: 'menu' })
      return
    }

    // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!to.meta.requiresAuth) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∏–¥–µ—Ç –Ω–∞ login - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      if (to.name === 'login' && authStore.isAuthenticated) {
        const defaultRoute = authStore.getDefaultRoute() // üîÑ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–ï–¢–û–î STORE
        next(defaultRoute)
        return
      }
      next()
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!authStore.isAuthenticated) {
      next({
        name: 'login',
        query: { redirect: to.fullPath }
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if (to.meta.allowedRoles) {
      const { hasAnyRole } = usePermissions()
      if (!hasAnyRole(to.meta.allowedRoles)) {
        next('/unauthorized')
        return
      }
    }

    next()
  } catch (error) {
    console.error('Navigation guard error:', error)
    next('/auth/login')
  }
})

export default router
